[{"path":"https://greengrassblueocean.github.io/RefinitivR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Laurens van der Burg. Maintainer.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"van der Burg L (2025). Refinitiv: Connect Datastream python Eikon api r. R package version 0.1.0.9004, https://greengrassblueocean.github.io/RefinitivR/.","code":"@Manual{,   title = {Refinitiv: Connect to Datastream and python Eikon api in r},   author = {Laurens {van der Burg}},   year = {2025},   note = {R package version 0.1.0.9004},   url = {https://greengrassblueocean.github.io/RefinitivR/}, }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"important-messages","dir":"","previous_headings":"","what":"Connect to Datastream and python Eikon api in r","title":"Connect to Datastream and python Eikon api in r","text":"can now use Eikon Workspace. package supports desktop session platform sessions. theoretically possible currently implemented. Python now optional, package can now also send direct JSON messages terminal. using pyton libraries update package: also run Refinitiv::install_eikon() . Python Eikon RDP libraries depricated can longer used. current commit package reverse compatible previous commits.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"refinitivr","dir":"","previous_headings":"","what":"RefinitivR","title":"Connect to Datastream and python Eikon api in r","text":"R interface Refinitv Eikon Refinitiv DataStream. RefinitivR R interface Refinitiv Eikon using direct JSON messages reticulate package (Python Eikon/RDP api). also provides access DataStream using DatastreamDSWS2R package. package way affiliated Thomson Reuters,Refinitv, Eikon, Datastream LSEG. subscription EIkon Datastream required use package. Use package risk! package uses DatastreamDSWS2R package CharlesCara (https://github.com/CharlesCara/DatastreamDSWS2R) DataStream Connections. reason package developed existing eikonapir package stability issues leading dropped api calls. package gives multiple options connecting Refinitiv API retries also dropped api calls result much stable api connection. Furthermore package tries robust possible automatically chunking long requests api limit compliant pieces retries failed requests order overcome http 400 errors. interface R datastream package DatastreamDSWS2R also provided allow easy retrieval information Eikon Datastream commands can used single r package. load package","code":"install.packages(\"devtools\") devtools::install_github(\"GreenGrassBlueOcean/RefinitivR\") library(Refinitiv)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"connecting-to-refinitiv-directly","dir":"","previous_headings":"","what":"Connecting to Refinitiv directly","title":"Connect to Datastream and python Eikon api in r","text":"using direct JSON method python installation necessary:","code":"Eikon <- EikonConnect(Eikonapplication_id = \"YOUR EIKON API KEY\", PythonModule = \"JSON\") RD <- RDConnect(application_id =  \"YOUR API KEY\",  PythonModule = \"JSON\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"connecting-to-refinitiv-eikon-through-the-official-refinitiv-python-api","dir":"","previous_headings":"","what":"Connecting to Refinitiv Eikon through the official Refinitiv python API","title":"Connect to Datastream and python Eikon api in r","text":"one wants use Python RD Packages: Install reticulate MiniConda environment r-eikon python module RD can used r-package. Installation python packages (Run Rstudio elevated permissions Administrator installation python libraries)","code":"Refinitiv::install_eikon() Eikon <- EikonConnect(Eikonapplication_id = \"YOUR EIKON API KEY\", PythonModule = \"RD\") RD <- RDConnect(application_id =  \"YOUR API KEY\",  PythonModule = \"RD\")"},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"connecting","dir":"","previous_headings":"","what":"Connecting:","title":"Connect to Datastream and python Eikon api in r","text":"(make sure Eikon/LSEG WorkSpace running online) installed python environment using Refinitiv::install_eikon() can also use:","code":"RD <- RDConnect('your api key', PythonModule = \"JSON\") RD <- RDConnect('your api key', PythonModule = \"RD\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"searching","dir":"","previous_headings":"","what":"Searching:","title":"Connect to Datastream and python Eikon api in r","text":"","code":"test <- RDPsearch(RD, query =  \"AAPL.O\")  test <- RDPsearch(RD, query =  \"AAPL.O\", select = \"ContractType,RIC\")   Presidents <- RDPsearch( RD, view = \"People\", query = 'president'                         , filter = \"startswith(LastName,'H')\"                         , select = 'DocumentTitle'                         , boost = ''                         , order_by = 'DocumentTitle asc'                         , group_by = 'FirstName'                         , group_count = 2                         , top = 20                         )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"get-history","dir":"","previous_headings":"","what":"Get History","title":"Connect to Datastream and python Eikon api in r","text":"","code":"timeseries1 <-  rd_GetHistory(RDObject = RD, universe=c(\"AAPL.O\", \"NVDA.O\"))  Datarequest <- rd_GetHistory( RDObject = RD, universe = c(\"GOOG.O\",\"AAPL.O\")                             , fields = c(\"TR.Revenue\",\"TR.GrossProfit\")                             , parameters = list(\"SDate\" = \"0CY\", \"Curn\" = \"CAD\")                             )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"get-data","dir":"","previous_headings":"","what":"Get Data","title":"Connect to Datastream and python Eikon api in r","text":"","code":"ex1 <- rd_GetData( RDObject = RD, rics = c(\"MMM\", \"III.L\")                  , Eikonformulas = c( \"TR.PE(Sdate=0D)/*P/E (LTM) - Diluted Excl*/\"                                     , \"TR.CompanyName\")                  , verbose = TRUE                  )   ex2 <- rd_GetData( RDObject = RD, rics = \"AAPL.O\"                   , Eikonformulas = \"TR.CompanyMarketCap(Sdate=0D)/*Market Cap*/\"                   )"},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"intraday-timeseries","dir":"","previous_headings":"Historical timeseries","what":"Intraday Timeseries","title":"Connect to Datastream and python Eikon api in r","text":"","code":"# Daily - Count Intraday_vod <- rd_GetHistoricalPricing( universe = \"VOD.L\", interval = \"P1D\"                                        , count = 20L, RDObject = RD)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"interday-timeseries","dir":"","previous_headings":"Historical timeseries","what":"Interday Timeseries","title":"Connect to Datastream and python Eikon api in r","text":"","code":"# 1 minute - Count - All Sessions Vodafone <- rd_GetHistoricalPricing( universe = c(\"VOD.L\", \"AAPL.O\")                                    , interval = \"PT1M\", count = 500L                                    , sessions= c(\"pre\",\"normal\",\"post\")                                    , RDObject = RD                                    )"},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"connecting-for-custom-instruments","dir":"","previous_headings":"Custom Instruments","what":"Connecting for Custom Instruments","title":"Connect to Datastream and python Eikon api in r","text":"Custom Instruments can created using JSON connection method. UUID Parameter: Eikon UUID can found : Eikon Terminal –> help –> –> user details: UUID e.g. ABCDE-123456","code":"RDConnect(application_id = NA, PythonModule = \"JSON\", UUID = \"ABCDE-123456\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"create-a-simple-instrument","dir":"","previous_headings":"Custom Instruments","what":"Create a Simple Instrument:","title":"Connect to Datastream and python Eikon api in r","text":"Get instrument details Update Instrument formula Delete","code":"rd_ManageCustomInstruments( operation = \"CREATE\", symbol = \"testAAPLandAMZN\"                           , formula = \"AAPL.O + AMZN.O\") rd_ManageCustomInstruments(operation = \"GET\", symbol = \"testAAPLandAMZN\") rd_ManageCustomInstruments( operation = \"UPDATE\", symbol = \"testAAPLandAMZN\"                           , formula = \"AAPL.O + 2 * AMZN.O\") rd_ManageCustomInstruments(operation = \"DELETE\", symbol = \"testAAPLandAMZN\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"build-a-custom-instrument-out-of-a-basket-of-instruments","dir":"","previous_headings":"Custom Instruments","what":"Build a custom instrument out of a basket of instruments","title":"Connect to Datastream and python Eikon api in r","text":"Build basket: Create custom instrument basket”: Create holidays instrument: Update basket holidays: Delete instrument:","code":"basket <- CustomInstrumentBasketBuilder(RICs = c(\"AAPL.O\", \"AMZN.O\"), Weights = c(0.5, 0.5)) rd_ManageCustomInstruments(operation = \"CREATE\", symbol = \"InterestingBasket\",                                basket = basket, currency = \"USD\") holidays <-  CustomInstrumentHolidayBuilder( dates = c(\"2023-12-01\", \"2023-12-31\")                                            , reasons = c(\"Special Bank Holiday 1\"                                                        , \"Special Bank Holiday 2\")                                            ) rd_ManageCustomInstruments(operation = \"UPDATE\", symbol = \"InterestingBasket\",                            holidays = holidays ) rd_ManageCustomInstruments(operation = \"DELETE\", symbol = \"InterestingBasket\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"useful-add-on-functions","dir":"","previous_headings":"Custom Instruments","what":"Useful add on functions","title":"Connect to Datastream and python Eikon api in r","text":"List created active custom instruments: Custom instruments come specific RIC format. ease use package RefinitivR create specific format . following formula allows retrieve official custom instrument name (RIC).","code":"AllActiveCustomInstruments <- rd_SearchCustomInstruments() RealInstrumentName <- CorrectCustomInstrument(\"InterestingBasket\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"omm-streaming-beta-version-will-still-change-in-future","dir":"","previous_headings":"","what":"OMM streaming (beta version will still change in future)","title":"Connect to Datastream and python Eikon api in r","text":"Create streaming object","code":"OMM_ws <- create_OMM_Stream() EUR_stream <- OMM_ws$new(name = \"EUR=\", fields = c(\"BID\",\"ASK\",\"OPEN_PRC\")) # start stream EUR_stream$connect() # stop stream EUR_stream$close()"},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"connecting-1","dir":"","previous_headings":"","what":"Connecting","title":"Connect to Datastream and python Eikon api in r","text":"(make sure Eikon/LSEG WorkSpace running online) installed python environment using Refinitiv::install_eikon() can also use:","code":"Eikon <- EikonConnect(Eikonapplication_id = \"YOUR EIKON API KEY\", PythonModule = \"JSON\") Eikon <- EikonConnect(Eikonapplication_id = \"YOUR EIKON API KEY\", PythonModule = \"RD\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"getting-news-stories","dir":"","previous_headings":"","what":"Getting News Stories","title":"Connect to Datastream and python Eikon api in r","text":"Scan headlines Get news stories","code":"headlines <- EikonGetNewsHeadlines( EikonObject = Eikon                                    , query = \"R:MSFT.O\", count = 2) stories <- EikonGetNewsStory(story_id = headlines$storyId, EikonObject = Eikon)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"performing-a-timeseries-request","dir":"","previous_headings":"","what":"Performing a timeseries request","title":"Connect to Datastream and python Eikon api in r","text":"","code":"Timeseries <- EikonGetTimeseries( EikonObject = Eikon, rics = c(\"MMM\", \"III.L\"),                                 , start_date = \"2020-01-01T01:00:00\",                                 , end_date = paste0(Sys.Date(), \"T01:00:00\")                                 )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"performing-a-request-for-a-monthly-economic-timeseries","dir":"","previous_headings":"","what":"Performing a request for a monthly economic timeseries","title":"Connect to Datastream and python Eikon api in r","text":"","code":"EconTimeSeries <- EikonGetTimeseries( EikonObject = Eikon                                       , rics = \"USCPI=ECI\"                                       , interval = \"monthly\"                                       , fields = c()                                       , start_date = \"2020-01-01T01:00:00\",                                       , end_date = paste0(Sys.Date(), \"T01:00:00\")                                       )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"performing-a-data-request","dir":"","previous_headings":"","what":"Performing a data request","title":"Connect to Datastream and python Eikon api in r","text":"","code":"Data <- EikonGetData(EikonObject = Eikon, rics = c(\"MMM\", \"III.L\"),                      Eikonformulas = c(\"TR.PE(Sdate=0D)/*P/E (LTM) - Diluted Excl*/\", \"TR.CompanyName\"))"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"retrieving-large-integers-with-eikongetdata-python-only-not-for-json-method","dir":"","previous_headings":"Performing a data request","what":"Retrieving large integers with EikonGetData (Python only, not for JSON method)","title":"Connect to Datastream and python Eikon api in r","text":"currently issue reticulate package handling large integers (like e.g. market capatilization) python r. issue described try leads following behaviour: ex2 return -1 Market capitalization. can never correct number. workaround scale back expected output smaller number. expressing market capatalization millions produced integer becomes smaller prevents integer becoming large. can done adding named list parameters field: Parameters = list(\"scale\" = 6) 6 stands millions. complex formula’s scale back formula adding scale = 6 TR.CompanyMarketCap","code":"ex2 <- EikonGetData( EikonObject = Eikon, rics = \"AAPl.O\"                     , Eikonformulas = \"TR.CompanyMarketCap(Sdate=0D)/*Market Cap*/\"                     ) ex2a <- EikonGetData( EikonObject = Eikon, rics = \"AAPl.O\"                     , Eikonformulas = \"TR.CompanyMarketCap(Sdate=0D)/*Market Cap*/\"                     , Parameters = list(\"scale\" = 6)                     ) ex2b <- EikonGetData( EikonObject = Eikon, rics = \"AAPl.O\"                     , Eikonformulas = \"TR.CompanyMarketCap(Sdate=0D, scale=6)/*Market Cap*/\"                     )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/index.html","id":"datastream","dir":"","previous_headings":"","what":"DataStream","title":"Connect to Datastream and python Eikon api in r","text":"details accessing datastream see https://github.com/CharlesCara/DatastreamDSWS2R. licensing see LICENSE File!","code":"DatastreamUserName <- \"Your datastream username\" DatastreamPassword <- \"Your datastream password\" DataStream <- DataStreamConnect(DatastreamUserName, DatastreamPassword)  DSResult <- DataStream$snapshotRequest(instrument = c(\"ABF\",\"RIO\",\"WPP\"),                                        datatype = \"P\",                                        requestDate = \"0D\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CheckTerminalType.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Terminal Type and Connectivity for Eikon or Workspace — CheckTerminalType","title":"Check Terminal Type and Connectivity for Eikon or Workspace — CheckTerminalType","text":"function checks connectivity Eikon Workspace sets corresponding port global options. first verifies terminal connection available checks Eikon Workspace Desktop running testing specific ports.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CheckTerminalType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Terminal Type and Connectivity for Eikon or Workspace — CheckTerminalType","text":"","code":"CheckTerminalType(verbose = FALSE, force = FALSE)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CheckTerminalType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Terminal Type and Connectivity for Eikon or Workspace — CheckTerminalType","text":"verbose Logical; `TRUE`, function print messages detection process. Defaults `FALSE`. force Logical; `TRUE`, function recheck reset terminal type even eikon_port option already set. Defaults `FALSE`.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CheckTerminalType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Terminal Type and Connectivity for Eikon or Workspace — CheckTerminalType","text":"function sets global option eikon_port either 9000 (Workspace) 9060 (Eikon), depending detected connection. connection, function stop error message.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CheckTerminalType.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check Terminal Type and Connectivity for Eikon or Workspace — CheckTerminalType","text":"function checks existence terminal connection attempting connect proxy port 9000. successful, checks Eikon connectivity attempting connect port 9060. Eikon running, port set 9060, Workspace detected, port set 9000.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CheckTerminalType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Terminal Type and Connectivity for Eikon or Workspace — CheckTerminalType","text":"","code":"if (FALSE) { # \\dontrun{ # Check terminal connection and detect terminal type CheckTerminalType(verbose = TRUE, force = TRUE) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CheckifCustomInstrument.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a symbol is really a custom symbol — CheckifCustomInstrument","title":"Check if a symbol is really a custom symbol — CheckifCustomInstrument","text":"Check symbol really custom symbol","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CheckifCustomInstrument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a symbol is really a custom symbol — CheckifCustomInstrument","text":"","code":"CheckifCustomInstrument(symbol, UUID = getOption(\".RefinitivUUID\"))"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CheckifCustomInstrument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a symbol is really a custom symbol — CheckifCustomInstrument","text":"symbol character UUID character  Eikon UUID can found : Eikon Terminal –> help –> –> user details: UUID e.g. ABCDE-123456","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CheckifCustomInstrument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a symbol is really a custom symbol — CheckifCustomInstrument","text":"boolean TRUE, FALSE NA","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CheckifCustomInstrument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a symbol is really a custom symbol — CheckifCustomInstrument","text":"","code":"if (FALSE) { # \\dontrun{ CheckifCustomInstrument(symbol = \"test\" , UUID = \"ABCDE-123456\") CheckifCustomInstrument(symbol = c(\"test\", 'test2') , UUID = \"ABCDE-123456\") CheckifCustomInstrument(symbol = \"test.ABCDE-123456\" , UUID = \"ABCDE-123456\") CheckifCustomInstrument(symbol = \"test.ABCDE-123456\" , UUID = NULL) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ConstructTicketJsonBody.html","id":null,"dir":"Reference","previous_headings":"","what":"rewrite JSON body in case a waiting ticket is assigned so that the correct json is requested — ConstructTicketJsonBody","title":"rewrite JSON body in case a waiting ticket is assigned so that the correct json is requested — ConstructTicketJsonBody","text":"rewrite JSON body case waiting ticket assigned correct json requested","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ConstructTicketJsonBody.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rewrite JSON body in case a waiting ticket is assigned so that the correct json is requested — ConstructTicketJsonBody","text":"","code":"ConstructTicketJsonBody(query, ticket, debug)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ConstructTicketJsonBody.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rewrite JSON body in case a waiting ticket is assigned so that the correct json is requested — ConstructTicketJsonBody","text":"query httr2_response ticket character hash code debug boolean print revised json message ticket number","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ConstructTicketJsonBody.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rewrite JSON body in case a waiting ticket is assigned so that the correct json is requested — ConstructTicketJsonBody","text":"revised json body ticket hash","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CorrectCustomInstrument.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to check if custom symbol is in format ","title":"Function to check if custom symbol is in format ","text":"Function check custom symbol format \"S)INSTRUMENTSYMBOL.UUID\"","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CorrectCustomInstrument.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to check if custom symbol is in format ","text":"","code":"CorrectCustomInstrument(symbol, UUID = getOption(\".RefinitivUUID\"))"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CorrectCustomInstrument.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to check if custom symbol is in format ","text":"symbol character UUID character  Eikon UUID can found : Eikon Terminal –> help –> –> user details: UUID e.g. ABCDE-123456","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CorrectCustomInstrument.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to check if custom symbol is in format ","text":"character corrected symbol","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CorrectCustomInstrument.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to check if custom symbol is in format ","text":"","code":"CorrectCustomInstrument(symbol = \"test\" , UUID = \"ABCDE-123456\") #> [1] \"S)test.ABCDE-123456\" CorrectCustomInstrument(symbol = \"S)test\" , UUID = \"ABCDE-123456\") #> [1] \"S)test.ABCDE-123456\" CorrectCustomInstrument(symbol = \"test.ABCDE-123456\" , UUID = \"ABCDE-123456\") #> [1] \"S)test.ABCDE-123456\""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentBasketBuilder.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a basket element for a custom instrument — CustomInstrumentBasketBuilder","title":"Build a basket element for a custom instrument — CustomInstrumentBasketBuilder","text":"Build basket element custom instrument","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentBasketBuilder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a basket element for a custom instrument — CustomInstrumentBasketBuilder","text":"","code":"CustomInstrumentBasketBuilder(RICs = NULL, Weights = NULL, Normalize = TRUE)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentBasketBuilder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a basket element for a custom instrument — CustomInstrumentBasketBuilder","text":"RICs character vector RICs basket Weights numeric vector weights basket Normalize boolean Normalize weight maximum 1?","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentBasketBuilder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a basket element for a custom instrument — CustomInstrumentBasketBuilder","text":"basket object can used","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentBasketBuilder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a basket element for a custom instrument — CustomInstrumentBasketBuilder","text":"","code":"if (FALSE) { # \\dontrun{ CustomInstrumentBasketBuilder(RICs = c(\"AAPL.O\", \"AMZN.O\"), Weights = c(0.5, 0.5)) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentHolidayBuilder.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a holiday object for a custom instrument — CustomInstrumentHolidayBuilder","title":"Build a holiday object for a custom instrument — CustomInstrumentHolidayBuilder","text":"Build holiday object custom instrument","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentHolidayBuilder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a holiday object for a custom instrument — CustomInstrumentHolidayBuilder","text":"","code":"CustomInstrumentHolidayBuilder(dates = NULL, reasons = NULL)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentHolidayBuilder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a holiday object for a custom instrument — CustomInstrumentHolidayBuilder","text":"dates vector character dates format YYYY-MM-DD reasons character vector reaons holida e.g. Christmas","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentHolidayBuilder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a holiday object for a custom instrument — CustomInstrumentHolidayBuilder","text":"object holidays","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentHolidayBuilder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a holiday object for a custom instrument — CustomInstrumentHolidayBuilder","text":"","code":"CustomInstrumentHolidayBuilder(dates = c(\"2023-12-01\", \"2023-12-31\") , reasons = c(\"Special Bank Holiday 1\", \"Special Bank Holiday 2\")) #> [[1]] #> [[1]]$date #> [1] \"2023-12-01\" #>  #> [[1]]$reason #> [1] \"Special Bank Holiday 1\" #>  #>  #> [[2]] #> [[2]]$date #> [1] \"2023-12-31\" #>  #> [[2]]$reason #> [1] \"Special Bank Holiday 2\" #>  #>  #> attr(,\"class\") #> [1] \"Refinitiv_holidays\""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentUDCBuilder.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a user defined continuation object for a custom instrument — CustomInstrumentUDCBuilder","title":"Build a user defined continuation object for a custom instrument — CustomInstrumentUDCBuilder","text":"Build user defined continuation object custom instrument","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentUDCBuilder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a user defined continuation object for a custom instrument — CustomInstrumentUDCBuilder","text":"","code":"CustomInstrumentUDCBuilder(root, rollover, spreadAdjustment)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentUDCBuilder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a user defined continuation object for a custom instrument — CustomInstrumentUDCBuilder","text":"root CC CL rollover volume based day based spreadAdjustment arithmetic percentage","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentUDCBuilder.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a user defined continuation object for a custom instrument — CustomInstrumentUDCBuilder","text":"object user defined continuation","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/CustomInstrumentUDCBuilder.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a user defined continuation object for a custom instrument — CustomInstrumentUDCBuilder","text":"","code":"if (FALSE) { # \\dontrun{  # no example cause function not implemented yet } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/DataStreamConnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize DataStream Connection — DataStreamConnect","title":"Initialize DataStream Connection — DataStreamConnect","text":"Initialize DataStream Connection","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/DataStreamConnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize DataStream Connection — DataStreamConnect","text":"","code":"DataStreamConnect(DatastreamUserName = NA, DatastreamPassword = NA)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/DataStreamConnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize DataStream Connection — DataStreamConnect","text":"DatastreamUserName Refinitiv DataStream username DatastreamPassword Refinitiv DataStream password","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/DataStreamConnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize DataStream Connection — DataStreamConnect","text":"DataStream R5 object","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/DataStreamConnect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize DataStream Connection — DataStreamConnect","text":"","code":"if (FALSE) { # \\dontrun{ DatastreamUserName <- \"Your datastream username\" DatastreamPassword <- \"Your datastream password\" DataStream <- DataStreamConnect(DatastreamUserName, DatastreamPassword) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonChunker.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a list of chunked Rics so that api limits can be satisfied — EikonChunker","title":"Returns a list of chunked Rics so that api limits can be satisfied — EikonChunker","text":"Returns list chunked Rics api limits can satisfied","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonChunker.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a list of chunked Rics so that api limits can be satisfied — EikonChunker","text":"","code":"EikonChunker(   RICS,   Eikonfields = NULL,   MaxCallsPerChunk = 12000,   Duration = NULL,   MaxRicsperChunk = 300 )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonChunker.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a list of chunked Rics so that api limits can be satisfied — EikonChunker","text":"RICS vector containing RICS requested Eikonfields list eikonfields requested default NULL, eikonfields supplied duration may supplied MaxCallsPerChunk maximum amount apicalls can made Duration natural number denoting amoount rows asked TimeSeries default NULL, Duration supplied Eikonfields may supplied MaxRicsperChunk natural number denoting maximum amount Rics available one call, default 300.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonChunker.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a list of chunked Rics so that api limits can be satisfied — EikonChunker","text":"list splitted RICS can returned guarantee compliance api limits.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonChunker.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Returns a list of chunked Rics so that api limits can be satisfied — EikonChunker","text":"https://developers.refinitiv.com/eikon-apis/eikon-data-api/docs?content=49692&type=documentation_item","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonChunker.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a list of chunked Rics so that api limits can be satisfied — EikonChunker","text":"","code":"if (FALSE) \"internal function no examples\" # \\dontrun{}"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonConnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize Eikon Python api — EikonConnect","title":"Initialize Eikon Python api — EikonConnect","text":"Initialize Eikon Python api","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonConnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize Eikon Python api — EikonConnect","text":"","code":"EikonConnect(   Eikonapplication_id = NA,   Eikonapplication_port = 9000L,   UUID = NA,   PythonModule = \"JSON\",   TestConnection = FALSE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonConnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize Eikon Python api — EikonConnect","text":"Eikonapplication_id Eikon api key Eikonapplication_port proxy port id UUID optional character parameter custom instruments, necessary regular requests PythonModule character choose Eikon (python),RD (python),JSON (direct JSON message without python) TestConnection Boolean, TRUE FALSE test connection initiating contact Eikon terminal","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonConnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize Eikon Python api — EikonConnect","text":"Python module EikonObject","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonConnect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize Eikon Python api — EikonConnect","text":"","code":"if (FALSE) { # \\dontrun{ Eikon <- EikonConnect(Eikonapplication_id = \"your key\", Eikonapplication_port = 9000L , PythonModule = \"Eikon\") Eikon <- EikonConnect(Eikonapplication_id = \"your key\", Eikonapplication_port = 9000L , PythonModule = \"RD\") } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetData.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain data from Eikon. Based on the Eikon python function get_data — EikonGetData","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — EikonGetData","text":"function automatically chunks list rics chunks comply api limitations end rebuilds chunks single data.frame.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — EikonGetData","text":"","code":"EikonGetData(   EikonObject,   rics,   Eikonformulas,   Parameters = NULL,   raw_output = FALSE,   time_out = 60,   verbose = FALSE,   SpaceConvertor = \".\" )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — EikonGetData","text":"EikonObject Eikon object created using EikonConnect function rics vector containing instrument RICS Eikonformulas vector containing character string Eikon Formulas Parameters named key value list setting parameters, Default: NULL raw_output return raw list chunk debugging purposes, default = FALSE time_out set maximum timeout Eikon server, default = 60 verbose boolean, set true print actual python call time stamp debugging. SpaceConvertor converts spaces variables name one following characters \".\", \",\" , \"-\", \"_\", default \".\"","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — EikonGetData","text":"data.frame containing data.Eikon","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — EikonGetData","text":"Currently known bug reticulate package large integers. request made returns large integers reticulate package return -1 integers. See also issue https://github.com/rstudio/reticulate/issues/323 try indicated https://community.rstudio.com/t/large-integer-conversion--python--r/82568","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetData.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — EikonGetData","text":"https://developers.refinitiv.com/eikon-apis/eikon-data-api/docs?content=49692&type=documentation_item","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — EikonGetData","text":"","code":"if (FALSE) { # \\dontrun{ Eikon <- Refinitiv::EikonConnect() ex1 <- EikonGetData(EikonObject = Eikon, rics = c(\"MMM\", \"III.L\"),              Eikonformulas = c(\"TR.PE(Sdate=0D)/*P/E (LTM) - Diluted Excl*/\"              , \"TR.CompanyName\"), verbose = TRUE)  ex2 <- EikonGetData( EikonObject = Eikon, rics = \"AAPL.O\"                    , Eikonformulas = \"TR.CompanyMarketCap(Sdate=0D)/*Market Cap*/\"                    )  # ex2 will return -1 which is most likely not the current market cap of apple\") # a workaround is to scale back the output to millions  ex2a <- EikonGetData( EikonObject = Eikon, rics = \"AAPL.O\"                    , Eikonformulas = \"TR.CompanyMarketCap(Sdate=0D)/*Market Cap*/\"                    , Parameters = list(\"scale\" = 6)                    ) # or for more complex formula's # scale back in the formula itself ex2b <- EikonGetData( EikonObject = Eikon, rics = \"AAPL.O\"                    , Eikonformulas = \"TR.CompanyMarketCap(Sdate=0D, scale=6)/*Market Cap*/\"                    ) } # }   if (FALSE) { # \\dontrun{ EikonJson <- RefinitivJsonConnect() ex1 <- EikonGetData(EikonObject = EikonJson, rics = c(\"MMM\", \"III.L\"),              Eikonformulas = c(\"TR.PE(Sdate=0D)/*P/E (LTM) - Diluted Excl*/\"              , \"TR.CompanyName\"), verbose = TRUE)  } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetNewsHeadlines.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a list of news headlines — EikonGetNewsHeadlines","title":"Returns a list of news headlines — EikonGetNewsHeadlines","text":"Returns list news headlines","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetNewsHeadlines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a list of news headlines — EikonGetNewsHeadlines","text":"","code":"EikonGetNewsHeadlines(   EikonObject = EikonConnect(),   query = NULL,   count = 10L,   repository = c(\"NewsWire\", \"NewsRoom\", \"WebNews\"),   date_from = NULL,   date_to = NULL,   raw_output = FALSE,   debug = FALSE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetNewsHeadlines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a list of news headlines — EikonGetNewsHeadlines","text":"EikonObject Connection Object result EikonConnect() query character array optional News headlines search criteria. text can contain RIC codes, company names, country names operators (, , , , parentheses quotes explicit search…).Tip: Append 'R:' front RIC names improve performance. count integer, optional Max number headlines retrieved.Value Range: [1-100].Default: 10 repository character, vector characters, optionalPossible values: c(\"NewsWire\",\"NewsRoom\",\"WebNews\") \"NewsRoom\" \"WebNews\" repositories query must defined. date_from string date, optional Beginning date range. String format : '%Y-%m-%dT%H:%M:%S'. e.g. 2016-01-20T15:04:05. date_to string datetime, optional End date range. String format : '%Y-%m-%dT%H:%M:%S'. e.g. 2016-01-20T15:04:05. raw_output boolean TRUE provide raw downloaded info Eikon debug boolean TRUE prints python call console","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetNewsHeadlines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a list of news headlines — EikonGetNewsHeadlines","text":"Returns data frame news headlines following columns: \"Index\": Timestamp publication time \"version_created\": Date latest update news \"text\": Text Headline \"story_id\": Identifier used retrieve full story using get_news_story legacy \"source_code\": Second news identifier","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetNewsHeadlines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a list of news headlines — EikonGetNewsHeadlines","text":"","code":"if (FALSE) { # \\dontrun{  Eikon <- Refinitiv::EikonConnect()  headlines <- EikonGetNewsHeadlines( EikonObject = Eikon                                    , query = c(\"R:MSFT.O\", \"R:AAPL.O\") , count = 2, debug = TRUE) } # }  if (FALSE) { # \\dontrun{   EikonJson <- RefinitivJsonConnect()   headlines <- EikonGetNewsHeadlines( EikonObject = EikonJson, debug = TRUE                                     , query = \"R:MSFT.O\", count = 2) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetNewsStory.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a single news story corresponding to the identifier provided in story_id — EikonGetNewsStory","title":"Return a single news story corresponding to the identifier provided in story_id — EikonGetNewsStory","text":"Return single news story corresponding identifier provided story_id","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetNewsStory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a single news story corresponding to the identifier provided in story_id — EikonGetNewsStory","text":"","code":"EikonGetNewsStory(   EikonObject = EikonConnect(),   story_id = NULL,   raw_output = FALSE,   debug = FALSE,   renderHTML = FALSE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetNewsStory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a single news story corresponding to the identifier provided in story_id — EikonGetNewsStory","text":"EikonObject Connection Object result EikonConnect() story_id story id. story id field find every headline retrieved legacy get_news_headlines raw_output boolean TRUE provide raw downloaded info Eikon debug boolean TRUE prints python call console renderHTML boolean TRUE renders HTML output file use website defaults FALSE","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetNewsStory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a single news story corresponding to the identifier provided in story_id — EikonGetNewsStory","text":"data.frame","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetNewsStory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a single news story corresponding to the identifier provided in story_id — EikonGetNewsStory","text":"","code":"if (FALSE) { # \\dontrun{  EikonJson <- RefinitivJsonConnect()  headlines <- EikonGetNewsHeadlines(EikonObject = EikonJson                                    , query = \"R:MSFT.O\", count = 2)  stories <- EikonGetNewsStory(story_id = headlines$storyId  , EikonObject = EikonJson)  } # }  if (FALSE) { # \\dontrun{   Eikon <- Refinitiv::EikonConnect()   story_id <- \"urn:newsml:newswire.refinitiv.com:20230829:nRTVm1b2r:5\"   stories_RD <- EikonGetNewsStory(story_id = story_id   , EikonObject = Eikon, debug = TRUE, raw_output  = FALSE)    EikonJson <- RefinitivJsonConnect()   stories_JSON <- EikonGetNewsStory(story_id = story_id   , EikonObject = EikonJson, debug = TRUE, raw_output  = FALSE)   identical(stories_RD, stories_JSON) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetSymbology.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a list of instrument names converted into another instrument code. For example: convert SEDOL instrument names to RIC names — EikonGetSymbology","title":"Returns a list of instrument names converted into another instrument code. For example: convert SEDOL instrument names to RIC names — EikonGetSymbology","text":"original python parameters raw_output debug used due int64 python R conversion problem. https://github.com/rstudio/reticulate/issues/729","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetSymbology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a list of instrument names converted into another instrument code. For example: convert SEDOL instrument names to RIC names — EikonGetSymbology","text":"","code":"EikonGetSymbology(   EikonObject,   symbol,   from_symbol_type = \"RIC\",   to_symbol_type = c(\"CUSIP\", \"ISIN\", \"SEDOL\", \"RIC\", \"ticker\", \"lipperID\", \"IMO\",     \"OAPermID\"),   bestMatch = TRUE,   time_out = 60,   verbose = FALSE,   raw_output = FALSE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetSymbology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a list of instrument names converted into another instrument code. For example: convert SEDOL instrument names to RIC names — EikonGetSymbology","text":"EikonObject Eikon object created using EikonConnect function symbol character list characters     Single instrument list instruments convert. from_symbol_type character Instrument code convert . Possible values: 'CUSIP', 'ISIN', 'SEDOL', 'RIC', 'ticker', 'lipperID', 'IMO' Default: 'RIC' to_symbol_type character  string list     Instrument code convert . Possible values: 'CUSIP', 'ISIN', 'SEDOL', 'RIC', 'ticker', 'lipperID', 'IMO', 'OAPermID' Default: None (means symbol types requested) bestMatch boolean     set TRUE, primary symbol requested. set FALSE, symbols requested time_out numeric set maximum timeout Eikon server, default = 60 verbose boolean, set true print actual python call time stamp debugging. raw_output boolean     Set parameter True get data json format set FALSE, function return data frame Default: FALSE","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetSymbology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a list of instrument names converted into another instrument code. For example: convert SEDOL instrument names to RIC names — EikonGetSymbology","text":"data.frame","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetSymbology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a list of instrument names converted into another instrument code. For example: convert SEDOL instrument names to RIC names — EikonGetSymbology","text":"","code":"if (FALSE) { # \\dontrun{ Eikon <- Refinitiv::EikonConnect() ex1 <- EikonGetSymbology(EikonObject = Eikon, symbol =  \"AAPL.O\"  , to_symbol_type = \"ISIN\" ) ex2 <- EikonGetSymbology(EikonObject = Eikon , symbol =  \"GB00B03MLX29\", from_symbol_type = \"ISIN\" ,  to_symbol_type = \"RIC\" , verbose = TRUE) ex3 <- EikonGetSymbology(EikonObject = Eikon , symbol =  \"GB00B03MLX29\", from_symbol_type = \"ISIN\" ,  to_symbol_type = \"RIC\" , verbose = TRUE, bestMatch = FALSE) ex4 <- EikonGetSymbology(EikonObject = Eikon, symbol =  \"RDSa.AS\" , to_symbol_type = \"ISIN\"  , verbose = TRUE) ex5 <- EikonGetSymbology(EikonObject = Eikon, symbol =  \"RDSa.L\" , to_symbol_type = \"ISIN\"  , verbose = TRUE) ex6 <- EikonGetSymbology(EikonObject = Eikon , symbol =  c(\"GB00B03MLX29\", \"NL0015476987\"), from_symbol_type = \"ISIN\" ,  to_symbol_type = \"RIC\" , verbose = TRUE, bestMatch = FALSE) ex7 <- EikonGetSymbology(EikonObject = Eikon , symbol =  c(\"GB00B03MLX29\", \"US0378331005\"), from_symbol_type = \"ISIN\" ,  to_symbol_type = \"RIC\" , verbose = TRUE, bestMatch = FALSE) } # }  if (FALSE) { # \\dontrun{  EikonJson <- RefinitivJsonConnect()  ex1 <- EikonGetSymbology(EikonObject = EikonJson, symbol =  \"AAPL.O\"  , to_symbol_type = \"ISIN\" ) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetTimeseries.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain timeseries from Eikon. Based on the Eikon python function get_timeseries — EikonGetTimeseries","title":"Function to obtain timeseries from Eikon. Based on the Eikon python function get_timeseries — EikonGetTimeseries","text":"Automatically chunks timeseries seperate apicalls binds together order comply api regulations.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetTimeseries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain timeseries from Eikon. Based on the Eikon python function get_timeseries — EikonGetTimeseries","text":"","code":"EikonGetTimeseries(   EikonObject,   rics,   interval = \"daily\",   calender = \"tradingdays\",   corax = \"adjusted\",   fields = c(\"TIMESTAMP\", \"VOLUME\", \"HIGH\", \"LOW\", \"OPEN\", \"CLOSE\"),   start_date = \"2020-01-01T01:00:00\",   end_date = paste0(Sys.Date(), \"T01:00:00\"),   cast = TRUE,   time_out = 60,   verbose = FALSE,   raw_output = FALSE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetTimeseries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain timeseries from Eikon. Based on the Eikon python function get_timeseries — EikonGetTimeseries","text":"EikonObject Python eikon module result EikonConnect rics vector containing Reuters rics interval Data interval. Possible values: 'tick', 'minute', 'hour', 'daily', 'weekly', 'monthly', 'quarterly', 'yearly'  Default: 'daily' calender Possible values: 'native', 'tradingdays', 'calendardays'., Default: 'tradingdays' corax possible values 'adjusted', 'unadjusted'. Default: 'adjusted' fields vector containing  combination ('TIMESTAMP', 'VOLUME', 'HIGH', 'LOW', 'OPEN', 'CLOSE') start_date Starting date time historical range. string format : '%Y-%m-%dT%H:%M:%S'. end_date End date time historical range.  string format : '%Y-%m-%dT%H:%M:%S'. cast cast data wide long format using data.table::dcast function, Default: TRUE time_out set maximum timeout Eikon server, default = 60 verbose boolean TRUE prints python call console raw_output provide raw downloaded info Eikon","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetTimeseries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to obtain timeseries from Eikon. Based on the Eikon python function get_timeseries — EikonGetTimeseries","text":"data.frame containing time series Eikon","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetTimeseries.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function to obtain timeseries from Eikon. Based on the Eikon python function get_timeseries — EikonGetTimeseries","text":"https://developers.refinitiv.com/eikon-apis/eikon-data-api/docs?content=49692&type=documentation_item","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonGetTimeseries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to obtain timeseries from Eikon. Based on the Eikon python function get_timeseries — EikonGetTimeseries","text":"","code":"if (FALSE) { # \\dontrun{ Eikon <- Refinitiv::EikonConnect() ex1 <- EikonGetTimeseries(EikonObject = Eikon, rics = c(\"MMM\", \"III.L\"),                    start_date = \"2020-01-01T01:00:00\",                    end_date = paste0(Sys.Date(), \"T01:00:00\"), verbose = TRUE) } # }  if (FALSE) { # \\dontrun{   EikonJson <- RefinitivJsonConnect()   ex1 <- EikonGetTimeseries(EikonObject = EikonJson, rics = c(\"MMM\", \"III.L\"),                    start_date = \"2020-01-01T01:00:00\",                    end_date = paste0(Sys.Date(), \"T01:00:00\"), verbose = TRUE) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonNameCleaner.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Eikon formula's in human readable names — EikonNameCleaner","title":"Convert Eikon formula's in human readable names — EikonNameCleaner","text":"Convert Eikon formula's human readable names","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonNameCleaner.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Eikon formula's in human readable names — EikonNameCleaner","text":"","code":"EikonNameCleaner(names, SpaceConvertor = \".\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonNameCleaner.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Eikon formula's in human readable names — EikonNameCleaner","text":"names vector data.frame column names SpaceConvertor converts spaces variables name one following characters \".\", \",\" , \"-\", \"_\", default \".\"","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonNameCleaner.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Eikon formula's in human readable names — EikonNameCleaner","text":"data.frame Eikon formula's replaced Eikon display Name last part formula.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonNameCleaner.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Eikon formula's in human readable names — EikonNameCleaner","text":"variables returned Eikon API always easily guessable upfront. fixed way variables returned. EikonNameCleaner improves returning UpperCamel case variable names. however turn capitalized words back lowercase. e.g. RDN_EXCHD2 stay RDN_EXCHD2 \"Dividend yield\" return \"Dividend.Yield\" (SpaceConvertor set \".\") parameter SpaceConvertor converts spaces following characters \".\", \",\" , \"-\", \"_\". Setting SpaceConvertor another value cause conversion spaces variable names. Space Conversion highly advisable due fact otherwise issues occur accessing columnnames returned data.frame example \"Dividend yield\" turn \"Dividend.Yield\" SpaceConvertor set \".\"","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonNameCleaner.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Eikon formula's in human readable names — EikonNameCleaner","text":"","code":"Refinitiv:::EikonNameCleaner(c(\"Instrument\",\"Company Name\",\"RDN_EXCHD2\",\"Operating MIC\")) #> [1] \"Instrument\"    \"Company.Name\"  \"RDN_EXCHD2\"    \"Operating.MIC\""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonPostProcessor.html","id":null,"dir":"Reference","previous_headings":"","what":"A postprocessor to process Eikon (python) get_Data into r data.frames — EikonPostProcessor","title":"A postprocessor to process Eikon (python) get_Data into r data.frames — EikonPostProcessor","text":"Python eikon get_data structure contains various list null replaced NA prevent disasters later handling data.frame. example using unlist function Null elements removed lists causing shorter vectors expected.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonPostProcessor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A postprocessor to process Eikon (python) get_Data into r data.frames — EikonPostProcessor","text":"","code":"EikonPostProcessor(Eikon_get_dataOuput, SpaceConvertor = \".\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonPostProcessor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A postprocessor to process Eikon (python) get_Data into r data.frames — EikonPostProcessor","text":"Eikon_get_dataOuput single Eikon$get_data result list Eikon$get_data results. SpaceConvertor converts spaces variables name one following characters \".\", \",\" , \"-\", \"_\", default \".\"","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonPostProcessor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A postprocessor to process Eikon (python) get_Data into r data.frames — EikonPostProcessor","text":"list data.frame cleaned output resulting error data.frame","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonPostProcessor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A postprocessor to process Eikon (python) get_Data into r data.frames — EikonPostProcessor","text":"","code":"if (FALSE) \"internal function no examples\" # \\dontrun{}"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonRepairMic.html","id":null,"dir":"Reference","previous_headings":"","what":"Often operating Mics are missing from the Eikon api, this function does repair these missing operating Mics based upon an internal list of codes. — EikonRepairMic","title":"Often operating Mics are missing from the Eikon api, this function does repair these missing operating Mics based upon an internal list of codes. — EikonRepairMic","text":"Often operating Mics missing Eikon api, function repair missing operating Mics based upon internal list codes.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonRepairMic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Often operating Mics are missing from the Eikon api, this function does repair these missing operating Mics based upon an internal list of codes. — EikonRepairMic","text":"","code":"EikonRepairMic(Fundamentals_Data)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonRepairMic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Often operating Mics are missing from the Eikon api, this function does repair these missing operating Mics based upon an internal list of codes. — EikonRepairMic","text":"Fundamentals_Data data.frame containing leasts columns \"RDN_EXCHD2\" \"Operating MIC\"","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonRepairMic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Often operating Mics are missing from the Eikon api, this function does repair these missing operating Mics based upon an internal list of codes. — EikonRepairMic","text":"corrected data.frame column \"Operating MIC\" empty string NA elements replaced operating MIC based RDN_EXCHD2","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonRepairMic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Often operating Mics are missing from the Eikon api, this function does repair these missing operating Mics based upon an internal list of codes. — EikonRepairMic","text":"","code":"if (FALSE) { # \\dontrun{ DataStream <- Refinitiv::DataStreamConnect(DatastreamUserName = DatastreamUserName,                        DatastreamPassword = DatastreamPassword) Stoxx1800Constits <- DataStream$listRequest(instrument = \"LDJS180E\",                        datatype = c(\"RIC\", \"NAME\"), requestDate = \"0D\") Eikon <- Refinitiv::EikonConnect() EikonDataWithFailingOPeratingMics <- EikonGetData(EikonObject = Eikon,       rics = Stoxx1800Constits$RIC,      Eikonformulas = c( \"RDN_EXCHD2\", \"TR.OperatingMIC\", \"TR.CompanyName\")) EikonDataWithRepairedOPeratingMics <- EikonRepairMic(EikonDataWithFailingOPeratingMics) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonShowAttributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the attributes of the Python Eikon — EikonShowAttributes","title":"Show the attributes of the Python Eikon — EikonShowAttributes","text":"Function returns names python Eikon api attributes can used commands R.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonShowAttributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the attributes of the Python Eikon — EikonShowAttributes","text":"","code":"EikonShowAttributes(EikonObject)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonShowAttributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the attributes of the Python Eikon — EikonShowAttributes","text":"EikonObject Python Object generated EikonConnect","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonShowAttributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the attributes of the Python Eikon — EikonShowAttributes","text":"list attributes","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonShowAttributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the attributes of the Python Eikon — EikonShowAttributes","text":"","code":"if (FALSE) { # \\dontrun{ Eikon <- EikonConnect(Eikonapplication_id = \"your key\", Eikonapplication_port = 9000L) EikonShowAttributes(EikonObject = Eikon)  EikonShowAttributes(EikonObject = RefinitivJsonConnect())  } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonTimeSeriesPreprocessor.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocessor for Eikon Get timeseries to automatically chunk pieces in the required length — EikonTimeSeriesPreprocessor","title":"Preprocessor for Eikon Get timeseries to automatically chunk pieces in the required length — EikonTimeSeriesPreprocessor","text":"subfunction EikonGetTimeseries","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonTimeSeriesPreprocessor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocessor for Eikon Get timeseries to automatically chunk pieces in the required length — EikonTimeSeriesPreprocessor","text":"","code":"EikonTimeSeriesPreprocessor(interval, rics, start_date, end_date)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonTimeSeriesPreprocessor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocessor for Eikon Get timeseries to automatically chunk pieces in the required length — EikonTimeSeriesPreprocessor","text":"interval character choose  c('tick', 'minute', 'hour', 'daily', 'weekly', 'monthly', 'quarterly', 'yearly') rics character vector containing Reuters unique stock indentifier start_date character start date format \"YYYY-MM-DD\" end_date character end date format \"YYYY-MM-DD\"","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonTimeSeriesPreprocessor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocessor for Eikon Get timeseries to automatically chunk pieces in the required length — EikonTimeSeriesPreprocessor","text":"list chunked rics","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/EikonTimeSeriesPreprocessor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocessor for Eikon Get timeseries to automatically chunk pieces in the required length — EikonTimeSeriesPreprocessor","text":"","code":"test <- Refinitiv:::EikonTimeSeriesPreprocessor(interval = \"daily\" , rics = rep(letters, 1000), start_date = \"2015-01-01\", end_date = \"2018-01-01\") #> The operation is too large for one api request and will be chunked in multiple requests #> the operation you intend to perform will cost 20358000 data points"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/InspectRequest.html","id":null,"dir":"Reference","previous_headings":"","what":"function to check if a downloaded dataframe is empty — InspectRequest","title":"function to check if a downloaded dataframe is empty — InspectRequest","text":"function check downloaded dataframe empty","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/InspectRequest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"function to check if a downloaded dataframe is empty — InspectRequest","text":"","code":"InspectRequest(df, functionname, verbose = TRUE)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/InspectRequest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"function to check if a downloaded dataframe is empty — InspectRequest","text":"df data.frame functionname function name error reporting verbose Boolean print variable","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/InspectRequest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"function to check if a downloaded dataframe is empty — InspectRequest","text":"boolean","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/InspectRequest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"function to check if a downloaded dataframe is empty — InspectRequest","text":"","code":"Refinitiv:::InspectRequest(data.frame(), functionname = \"test\") #> data.frame #>  #>  #> test request returned with length 0 Refinitiv:::InspectRequest(data.frame(test = c(1,2),test2 = c(\"a\",\"b\")), functionname = \"test\") #> data.frame #> testtest2 #> NULLNULL #> test request returned with length 2"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/NagerHolidayData.html","id":null,"dir":"Reference","previous_headings":"","what":"Public Holidays between the years 1990 and 2030 — NagerHolidayData","title":"Public Holidays between the years 1990 and 2030 — NagerHolidayData","text":"dataset containing public holidays 100 Countries.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/NagerHolidayData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Public Holidays between the years 1990 and 2030 — NagerHolidayData","text":"","code":"NagerHolidayData"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/NagerHolidayData.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Public Holidays between the years 1990 and 2030 — NagerHolidayData","text":"list containing: NagerHolidayData data.frame specifics Holiday dates country year HolidayVectorperCountry list vectors containing public holiday dates per country HolidayDataFrame dataframe two columns date (holiday) iso3c countryindication country holiday located","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/NagerHolidayData.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Public Holidays between the years 1990 and 2030 — NagerHolidayData","text":"https://date.nager./","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/OperatingMicLookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Operating Mic lookup from Reuters Exchange Code — OperatingMicLookup","title":"Operating Mic lookup from Reuters Exchange Code — OperatingMicLookup","text":"data.frame containing lookup list Reuters exchange codes operating mics","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/OperatingMicLookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Operating Mic lookup from Reuters Exchange Code — OperatingMicLookup","text":"","code":"OperatingMicLookup"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/OperatingMicLookup.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Operating Mic lookup from Reuters Exchange Code — OperatingMicLookup","text":"data.frame containing: RDN_EXCHD2 Reuters Exchange Code repairedMIC operating mic Reuters exchange Code","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/OperatingMicLookup.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Operating Mic lookup from Reuters Exchange Code — OperatingMicLookup","text":"derived Reuters Eikon terminal","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/PostProcessTimeSeriesRequest.html","id":null,"dir":"Reference","previous_headings":"","what":"Postprocessor for raw Timeseries Requests — PostProcessTimeSeriesRequest","title":"Postprocessor for raw Timeseries Requests — PostProcessTimeSeriesRequest","text":"Postprocessor raw Timeseries Requests","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/PostProcessTimeSeriesRequest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Postprocessor for raw Timeseries Requests — PostProcessTimeSeriesRequest","text":"","code":"PostProcessTimeSeriesRequest(RawTimeSeriesRequest)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/PostProcessTimeSeriesRequest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Postprocessor for raw Timeseries Requests — PostProcessTimeSeriesRequest","text":"RawTimeSeriesRequest raw return eikon EikonGetTimeseries","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/PostProcessTimeSeriesRequest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Postprocessor for raw Timeseries Requests — PostProcessTimeSeriesRequest","text":"data.frame","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ProcessIPAOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Process output of RDP IPA calls — ProcessIPAOutput","title":"Process output of RDP IPA calls — ProcessIPAOutput","text":"Process output RDP IPA calls","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ProcessIPAOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process output of RDP IPA calls — ProcessIPAOutput","text":"","code":"ProcessIPAOutput(IPAoutput)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ProcessIPAOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process output of RDP IPA calls — ProcessIPAOutput","text":"IPAoutput output python call RDP$ipa$FinancialContracts","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ProcessIPAOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process output of RDP IPA calls — ProcessIPAOutput","text":"data.frame","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ProcessIPAOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process output of RDP IPA calls — ProcessIPAOutput","text":"","code":"if (FALSE) { # \\dontrun{ ipa_output <- RDPGetOptionAnalytics(  OptionRics = c(\"AAPLL032112500.U\", \"AAPLL032113700.U\") , raw = TRUE) ProcessIPAOutput(ipa_output) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ProcessSymbology.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to process raw output of python get_symbology to better in r readable format — ProcessSymbology","title":"Function to process raw output of python get_symbology to better in r readable format — ProcessSymbology","text":"Function process raw output python get_symbology better r readable format","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ProcessSymbology.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to process raw output of python get_symbology to better in r readable format — ProcessSymbology","text":"","code":"ProcessSymbology(EikonSymbologyResult, from_symbol_type, to_symbol_type)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ProcessSymbology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to process raw output of python get_symbology to better in r readable format — ProcessSymbology","text":"EikonSymbologyResult nested list: output EikonGetSymbology option raw_output set TRUE from_symbol_type character use input EikonGetSymbology to_symbol_type character use input EikonGetSymbology","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ProcessSymbology.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to process raw output of python get_symbology to better in r readable format — ProcessSymbology","text":"data.frame containing 4 columns to_symbol_type, from_symbol_type, BestMatch (defined Eikon), error","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/ProcessSymbology.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to process raw output of python get_symbology to better in r readable format — ProcessSymbology","text":"","code":"if (FALSE) { # \\dontrun{ Raw_output_No_BestMatch <- EikonGetSymbology(EikonObject = Eikon , symbol =  c(\"GB00B03MLX29\", \"US0378331005\"), from_symbol_type = \"ISIN\" , to_symbol_type = \"RIC\" , raw_output = TRUE, bestMatch = FALSE  ) ProcessSymbology(EikonSymbologyResult = Raw_output_No_BestMatch , from_symbol_type = \"ISIN\", to_symbol_type = \"RIC\")  Raw_output_BestMatch <- EikonGetSymbology(EikonObject = Eikon , symbol =  c(\"GB00B03MLX29\", \"US0378331005\"), from_symbol_type = \"ISIN\" , to_symbol_type = \"RIC\" , raw_output = TRUE, bestMatch = TRUE  ) ProcessSymbology(EikonSymbologyResult = Raw_output_BestMatch , from_symbol_type = \"ISIN\", to_symbol_type = \"RIC\") } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/Process_RDP_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Output processor for python function RDP$get_search_metadata — Process_RDP_output","title":"Output processor for python function RDP$get_search_metadata — Process_RDP_output","text":"Output processor python function RDP$get_search_metadata","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/Process_RDP_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output processor for python function RDP$get_search_metadata — Process_RDP_output","text":"","code":"Process_RDP_output(python_json, RemoveNA = FALSE, SpaceConvertor = NULL)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/Process_RDP_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output processor for python function RDP$get_search_metadata — Process_RDP_output","text":"python_json python json string RemoveNA boolean remove NA value's defaults FALSE","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/Process_RDP_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output processor for python function RDP$get_search_metadata — Process_RDP_output","text":"r data.frame","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/Process_RDP_output.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output processor for python function RDP$get_search_metadata — Process_RDP_output","text":"","code":"if (FALSE) { # \\dontrun{ \"internal function don't use directly\" path = paste0(\"C:\\\\Users\\\\XXXX\\\\Documents\\\\GitHub\", \"\\\\RefinitivR\\\\tests\\\\testthat\\\\PY_get_search_metadata_input.py\") PY_get_search_metadata_input <- reticulate::r_to_py(  reticulate::py_load_object(file = path))  r_df <- Process_RDP_output(PY_get_search_metadata_input) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/PropertiesActiveRefinitivObject.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to check through which Refinitiv Connection object requests are made — PropertiesActiveRefinitivObject","title":"Function to check through which Refinitiv Connection object requests are made — PropertiesActiveRefinitivObject","text":"Function check Refinitiv Connection object requests made","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/PropertiesActiveRefinitivObject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to check through which Refinitiv Connection object requests are made — PropertiesActiveRefinitivObject","text":"","code":"PropertiesActiveRefinitivObject(verbose = TRUE)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/PropertiesActiveRefinitivObject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to check through which Refinitiv Connection object requests are made — PropertiesActiveRefinitivObject","text":"verbose boolean defaults TRUE","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/PropertiesActiveRefinitivObject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to check through which Refinitiv Connection object requests are made — PropertiesActiveRefinitivObject","text":"named list","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/PropertiesActiveRefinitivObject.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to check through which Refinitiv Connection object requests are made — PropertiesActiveRefinitivObject","text":"","code":"test <- PropertiesActiveRefinitivObject() #> Refinitiv Connection method = not loaded  #>  Version =   #>  Type ="},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDConnect.html","id":null,"dir":"Reference","previous_headings":"","what":"RD connection function to refinitiv Data libraries — RDConnect","title":"RD connection function to refinitiv Data libraries — RDConnect","text":"RD connection function refinitiv Data libraries RDPConnect alias provide backwards compatability code written RDP","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDConnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RD connection function to refinitiv Data libraries — RDConnect","text":"","code":"RDConnect(application_id = NA, PythonModule = \"JSON\", UUID = NA)  RDPConnect(application_id = NA, PythonModule = \"JSON\", UUID = NA)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDConnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RD connection function to refinitiv Data libraries — RDConnect","text":"application_id refinitiv data api key PythonModule character \"JSON\" \"RD\" UUID optional character parameter custom instruments, necessary regular requests","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDConnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RD connection function to refinitiv Data libraries — RDConnect","text":"RD opbject","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDConnect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RD connection function to refinitiv Data libraries — RDConnect","text":"","code":"if (FALSE) { # \\dontrun{ rd <- RDConnect(application_id = \"your key\") } # } if (FALSE) { # \\dontrun{ rd <- RDPConnect(application_id = \"your key\") } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPGetOptionAnalytics.html","id":null,"dir":"Reference","previous_headings":"","what":"Get RDP option analytics — RDPGetOptionAnalytics","title":"Get RDP option analytics — RDPGetOptionAnalytics","text":"Get RDP option analytics","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPGetOptionAnalytics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get RDP option analytics — RDPGetOptionAnalytics","text":"","code":"RDPGetOptionAnalytics(   RDP = RDConnect(),   OptionRics = NULL,   raw = FALSE,   verbose = TRUE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPGetOptionAnalytics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get RDP option analytics — RDPGetOptionAnalytics","text":"RDP Refinitiv DataPlatform Connection object, defaults  RDConnect() OptionRics character vector option rics raw return raw data RDP call verbose boolean, print download progress ","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPGetOptionAnalytics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get RDP option analytics — RDPGetOptionAnalytics","text":"data.frame option data","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPGetOptionAnalytics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get RDP option analytics — RDPGetOptionAnalytics","text":"","code":"if (FALSE) { # \\dontrun{ OPtionInstruments <- Refinitiv::RDPsearch(query = \"aapl.o\", view = \"RelatedOption\") OPtionInstruments <- OPtionInstruments[grep(pattern = \"*.U\" , x = OPtionInstruments$RIC),]$RIC  Analytics <- RDPGetOptionAnalytics(OptionRics = OPtionInstruments) Analytics <- RDPGetOptionAnalytics(OptionRics = c(\"AAPLL032112500.U\", \"AAPLL032113700.U\"))  } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPShowAvailableSearchViews.html","id":null,"dir":"Reference","previous_headings":"","what":"Show Available Search Views for seachview parameter in RDPget_search_metadata — RDPShowAvailableSearchViews","title":"Show Available Search Views for seachview parameter in RDPget_search_metadata — RDPShowAvailableSearchViews","text":"Show Available Search Views seachview parameter RDPget_search_metadata","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPShowAvailableSearchViews.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show Available Search Views for seachview parameter in RDPget_search_metadata — RDPShowAvailableSearchViews","text":"","code":"RDPShowAvailableSearchViews(Platform = \"JSON\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPShowAvailableSearchViews.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show Available Search Views for seachview parameter in RDPget_search_metadata — RDPShowAvailableSearchViews","text":"Platform character vector either RD, RDP JSON, defaults JSON","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPShowAvailableSearchViews.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show Available Search Views for seachview parameter in RDPget_search_metadata — RDPShowAvailableSearchViews","text":"vector searchviews can used.","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPShowAvailableSearchViews.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show Available Search Views for seachview parameter in RDPget_search_metadata — RDPShowAvailableSearchViews","text":"","code":"RDPShowAvailableSearchViews(Platform = \"JSON\") #>  [1] \"BondFutOptQuotes\"            \"CdsInstruments\"              #>  [3] \"CdsQuotes\"                   \"CmoInstruments\"              #>  [5] \"CmoQuotes\"                   \"CommodityQuotes\"             #>  [7] \"DealsMergersAndAcquisitions\" \"DerivativeInstruments\"       #>  [9] \"DerivativeQuotes\"            \"EquityDerivativeInstruments\" #> [11] \"EquityDerivativeQuotes\"      \"EquityInstruments\"           #> [13] \"EquityQuotes\"                \"FixedIncomeInstruments\"      #> [15] \"FixedIncomeQuotes\"           \"FundQuotes\"                  #> [17] \"GovCorpInstruments\"          \"GovCorpQuotes\"               #> [19] \"IRDQuotes\"                   \"IndexInstruments\"            #> [21] \"IndexQuotes\"                 \"IndicatorQuotes\"             #> [23] \"Instruments\"                 \"LoanInstruments\"             #> [25] \"LoanQuotes\"                  \"MoneyQuotes\"                 #> [27] \"MortQuotes\"                  \"MortgageInstruments\"         #> [29] \"MunicipalInstruments\"        \"MunicipalQuotes\"             #> [31] \"Organisations\"               \"People\"                      #> [33] \"PhysicalAssets\"              \"Quotes\"                      #> [35] \"QuotesAndSTIRs\"              \"STIRs\"                       #> [37] \"SearchAll\"                   \"VesselPhysicalAssets\"        #> [39] \"YieldCurveContQuotes\"        RDPShowAvailableSearchViews(Platform},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPget_search_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get search metadata from RDP — RDPget_search_metadata","title":"Get search metadata from RDP — RDPget_search_metadata","text":"Get search metadata RDP","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPget_search_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get search metadata from RDP — RDPget_search_metadata","text":"","code":"RDPget_search_metadata(RDP = RDConnect(), searchView = NULL)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPget_search_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get search metadata from RDP — RDPget_search_metadata","text":"RDP Refinitiv DataPlatform Connection object searchView character choose @seealso RDPShowAvailableSearchViews","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPget_search_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get search metadata from RDP — RDPget_search_metadata","text":"data.table metadata search results","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPget_search_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get search metadata from RDP — RDPget_search_metadata","text":"","code":"if (FALSE) { # \\dontrun{ test_json <- RDPget_search_metadata(RDP =  RefinitivJsonConnect()                               , searchView = \"EquityQuotes\") test_rd <- RDPget_search_metadata(RDP = RDConnect()                               , searchView = \"EQUITY_QUOTES\") } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPsearch.html","id":null,"dir":"Reference","previous_headings":"","what":"RDP search function is a wrapper for the pyton rdp.search function — RDPsearch","title":"RDP search function is a wrapper for the pyton rdp.search function — RDPsearch","text":"RDP search function wrapper pyton rdp.search function","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPsearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"RDP search function is a wrapper for the pyton rdp.search function — RDPsearch","text":"","code":"RDPsearch(   RDP = RDConnect(),   query = NULL,   view = NULL,   select = NULL,   top = NULL,   filter = NULL,   boost = NULL,   order_by = NULL,   group_by = NULL,   group_count = NULL,   navigators = NULL,   features = NULL,   SpaceConvertor = \".\",   Arglist = list() )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPsearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"RDP search function is a wrapper for the pyton rdp.search function — RDPsearch","text":"RDP Refinitiv DataPlatform Connection object query optional character view optional character see also RDPShowAvailableSearchViews available searchviews select optional character string length 1 e.g/ \"ContractType,RIC\" top optional numeric search result cut filter optional character filter e.g. \"startswith(LastName,'H')\" boost optional meaning clear refinitiv documentation order_by optional character string e.g. 'DocumentTitle asc' group_by optional character string e.g. 'FirstName' group_count optional numeric number items displayed per group navigators optional character string e.g. features optional character, meaning clear refinitiv documentation SpaceConvertor optional character, invokes name cleaning parameters can easier used r, defaults \".\" Arglist optional named list pass parameters named list withouding needing use .call.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPsearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"RDP search function is a wrapper for the pyton rdp.search function — RDPsearch","text":"data.frame search results","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPsearch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"RDP search function is a wrapper for the pyton rdp.search function — RDPsearch","text":"additional examples see  https://github.com/Refinitiv-API-Samples/Article.RDPLibrary.Python.Search","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RDPsearch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"RDP search function is a wrapper for the pyton rdp.search function — RDPsearch","text":"","code":"if (FALSE) { # \\dontrun{ RDConnect('your api key') test <- RDPsearch(query =  \"AAPL.O\", select = \"ContractType,RIC\")  Presidents <- RDPsearch( view = \"People\", query = 'president'                        , filter = \"startswith(LastName,'H')\"                        , select = 'DocumentTitle'                        , boost = ''                        , order_by = 'DocumentTitle asc'                        , group_by = 'FirstName'                        , group_count = 2                        , top = 20                        , navigators = 'HullType'                        , features = 'spell' )  reporates <- RDPsearch( view = \"IndicatorQuotes\"                       , query = \"repo rate\", group_by = \"CentralBankName\"                       , group_count = 3                       , select = paste0(\"CentralBankName,DocumentTitle,\"                                        ,\"RIC,ObservationValue\")                       , top = 1000)  EquitiesSearch <-  RDPsearch( view = \"EquityQuotes\"                             , filter = paste0(\"Eps gt 6.0 and \"                                       , \"RCSTRBC2012Name eq 'Personal & \"                                       , \"Household Products & Services' \"                                       , \"and MktCapTotalUsd gt 100000000 \"                                       , \"and IsPrimaryRIC eq true\")                             , top =  10000                             , select = paste0(\"DocumentTitle , RIC, Eps,\"                                              ,\" MktCapTotalUsd\"))   Vessels <- RDPsearch( view = \"VesselPhysicalAssets\"                     , filter = paste0( \"RCSAssetTypeLeaf eq 'tanker'\"                                , \" and RCSRegionLeaf eq 'Gulf of Mexico'\")                     , top =  10000                     , navigators = \"OriginPort\"                     , select = paste0( \"DocumentTitle,RIC,OriginPort\"                                      , \" ,DestinationPort,RCSFlagLeaf\"                                      , \",AssetName,AISStatus,\"                                      , \"VesselCurrentPortRIC,IMO\")                     )   ListedSearch <- RDPsearch(Arglist = list(query = \"president\", view = \"People\"))  SearchQuery = \"aapl.o\" ListedSearch <- RDPsearch(query = SearchQuery) } # }  if (FALSE) { # \\dontrun{   SearchQuery = \"aapl.o\"   ListedSearch <- RDPsearch(RDP = RefinitivJsonConnect(), query = SearchQuery)  } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RefinitivJsonConnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to Eikon directly with JSON requests — RefinitivJsonConnect","title":"Connect to Eikon directly with JSON requests — RefinitivJsonConnect","text":"Connect Eikon directly JSON requests","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RefinitivJsonConnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to Eikon directly with JSON requests — RefinitivJsonConnect","text":"","code":"RefinitivJsonConnect(Eikonapplication_id = NA, Eikonapplication_port = 9000L)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RefinitivJsonConnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to Eikon directly with JSON requests — RefinitivJsonConnect","text":"Eikonapplication_id character eikon api key Eikonapplication_port numeric proxy port 9000 9060 RDP/RD","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RefinitivJsonConnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to Eikon directly with JSON requests — RefinitivJsonConnect","text":"RefinitivConnection Object","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/RefinitivJsonConnect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to Eikon directly with JSON requests — RefinitivJsonConnect","text":"","code":"if (FALSE) { # \\dontrun{  EikonJson <- RefinitivJsonConnect() } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/SearchViewsLookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Lookup code for SearchViews to alternate between RD and JSON format SearchViews — SearchViewsLookup","title":"Lookup code for SearchViews to alternate between RD and JSON format SearchViews — SearchViewsLookup","text":"data.table containing lookup list RD SearchViews JSON SearchViews","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/SearchViewsLookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lookup code for SearchViews to alternate between RD and JSON format SearchViews — SearchViewsLookup","text":"","code":"SearchViewsLookup"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/SearchViewsLookup.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Lookup code for SearchViews to alternate between RD and JSON format SearchViews — SearchViewsLookup","text":"data.table containing: SearchViews_RD SearchViews valid RD python API SearchViews_JSON_RDP SearchViews valid RDP python API direct JSON calls","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/SearchViewsLookup.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Lookup code for SearchViews to alternate between RD and JSON format SearchViews — SearchViewsLookup","text":"Refinitiv Api Documentation","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/TR_Field.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to build the Eikonformulas parameter for the EikonGetData function. — TR_Field","title":"Helper function to build the Eikonformulas parameter for the EikonGetData function. — TR_Field","text":"Helper function build Eikonformulas parameter EikonGetData function.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/TR_Field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to build the Eikonformulas parameter for the EikonGetData function. — TR_Field","text":"","code":"TR_Field(   Field_name = NULL,   Parameters = NULL,   sort_dir = NULL,   sort_priority = NULL )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/TR_Field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to build the Eikonformulas parameter for the EikonGetData function. — TR_Field","text":"Field_name string Field name request. can find list Data Item Browser. Parameters named List containing parameters field passed argument field_name sort_dir string Indicate sort direction. Possible values \\'asc\\' \\'desc\\'. default value \\'asc\\' sort_priority integer Gives priority field sorting. highest priority 0 (zero). default value NULL","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/TR_Field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to build the Eikonformulas parameter for the EikonGetData function. — TR_Field","text":"list list can used import ","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/TR_Field.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function to build the Eikonformulas parameter for the EikonGetData function. — TR_Field","text":"","code":"TR_Field(Field_name = 'tr.revenue') #> $tr.revenue #> list() #>  TR_Field(Field_name ='tr.open', sort_dir ='asc', sort_priority = 1) #> $tr.open #> $tr.open[[1]] #> [1] \"asc\" #>  #> $tr.open[[2]] #> [1] 1 #>  #>  TR_Field(Field_name ='TR.GrossProfit', Parameters = list('Scale' = 6, 'Curn'= 'EUR')         , sort_dir = 'asc', sort_priority = 0) #> $TR.GrossProfit #> $TR.GrossProfit$params #> $TR.GrossProfit$params$Scale #> [1] 6 #>  #> $TR.GrossProfit$params$Curn #> [1] \"EUR\" #>  #>  #> $TR.GrossProfit[[2]] #> [1] \"asc\" #>  #> $TR.GrossProfit[[3]] #> [1] 0 #>  #>"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/TestDataStreamCredentials.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the DataStream Credentials are valid — TestDataStreamCredentials","title":"Test if the DataStream Credentials are valid — TestDataStreamCredentials","text":"function checks validity provided DataStream username password sending request DataStream API.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/TestDataStreamCredentials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the DataStream Credentials are valid — TestDataStreamCredentials","text":"","code":"TestDataStreamCredentials(DatastreamUsername = NULL, DatastreamPassword = NULL)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/TestDataStreamCredentials.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the DataStream Credentials are valid — TestDataStreamCredentials","text":"DatastreamUsername Character. DataStream username. DatastreamPassword Character. DataStream password.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/TestDataStreamCredentials.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the DataStream Credentials are valid — TestDataStreamCredentials","text":"Logical. Returns `TRUE` credentials valid. invalid,   returns `FALSE` issues warning error message.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/TestDataStreamCredentials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if the DataStream Credentials are valid — TestDataStreamCredentials","text":"","code":"TestDataStreamCredentials(DatastreamUsername = \"wrongusername\" , DatastreamPassword = \"wrongPassword\") #> URL does not seem to exist: http://product.datastream.com/DSWSClient/V1/DSService.svc/rest/Token?username=wrongusername&password=wrongPassword Either the service is down or the credentials are invalid. #> Original error message: #> HTTP 403 Forbidden. #> Warning: The provided DataStream credentials (username: \"wrongusername\", password: \"wrongPassword\") are invalid. #> [1] FALSE"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/build_get_query_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Build GET Query String — build_get_query_string","title":"Build GET Query String — build_get_query_string","text":"function takes named list (may include NULL elements) converts non-NULL elements URL-encoded query string suitable use HTTP GET request. reserved characters (example, spaces, colons) encoded. input list empty (becomes empty omitting NULL elements), function returns empty string.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/build_get_query_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build GET Query String — build_get_query_string","text":"","code":"build_get_query_string(params)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/build_get_query_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build GET Query String — build_get_query_string","text":"params named list parameters. element NULL omitted.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/build_get_query_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build GET Query String — build_get_query_string","text":"character string representing URL-encoded query string. parameters remain, string prepended \"?\".","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/build_get_query_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build GET Query String — build_get_query_string","text":"","code":"if (FALSE) { # \\dontrun{   query_list <- list(     query    = \"R:TSLA.O AND Language:EN\",     limit    = 5,     dateFrom = \"2023-01-01T00:00:00Z\",     extra    = NULL   )   qs <- build_get_query_string(query_list)   # qs will be:   # \"?query=R%3ATSLA.O%20AND%20Language%3AEN&limit=5&dateFrom=2023-01-01T00%3A00%3A00Z\"    # Passing an empty list returns an empty string:   build_get_query_string(list()) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/create_OMM_Stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an OMM stream when an Eikon terminal is running — create_OMM_Stream","title":"Create an OMM stream when an Eikon terminal is running — create_OMM_Stream","text":"Create OMM stream Eikon terminal running","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/create_OMM_Stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an OMM stream when an Eikon terminal is running — create_OMM_Stream","text":"","code":"create_OMM_Stream(   name = \"EUR=\",   domain = \"MarketPrice\",   service = NULL,   fields = c(\"BID\", \"ASK\", \"OPEN_PRC\"),   extended_params = NULL )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/create_OMM_Stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an OMM stream when an Eikon terminal is running — create_OMM_Stream","text":"name character  RIC retrieve item stream. domain character Specify item stream domain (MarketPrice, MarketByPrice, ...), defaults MarketPrice service Specify service subscribe . NULL fields character vector Specify fields retrieve. extended_params NULL Specify optional params","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/create_OMM_Stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an OMM stream when an Eikon terminal is running — create_OMM_Stream","text":"OMM stream object","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/create_OMM_Stream.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an OMM stream when an Eikon terminal is running — create_OMM_Stream","text":"Note field names, depend exchange order book label (domain = MarketByPrice [level2] )(ORDER_PRC, ORDER_SIDE, ACC_SIZE) (domain = MarketPrice)(BEST_BID1, BEST_BSIZ1, BEST_ASK1, BEST_ASIZ1)","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/create_OMM_Stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an OMM stream when an Eikon terminal is running — create_OMM_Stream","text":"","code":"if (FALSE) { # \\dontrun{ OMM_ws <- create_OMM_Stream() EUR_stream <- OMM_ws$new(name = \"EUR=\", fields = c(\"BID\",\"ASK\",\"OPEN_PRC\")) # start stream EUR_stream$connect() # stop stream EUR_stream$close() } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/create_RDP_Stream.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a RDP stream when an Eikon terminal is running — create_RDP_Stream","title":"Create a RDP stream when an Eikon terminal is running — create_RDP_Stream","text":"Create RDP stream Eikon terminal running","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/create_RDP_Stream.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a RDP stream when an Eikon terminal is running — create_RDP_Stream","text":"","code":"create_RDP_Stream(   service,   universe,   view,   parameters,   api,   extended_parameters )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/create_RDP_Stream.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a RDP stream when an Eikon terminal is running — create_RDP_Stream","text":"service string optional name RDP service universe RIC retrieve item stream. view data fields retrieve item stream parameters extra parameters retrieve item stream. api specific name RDP streaming defined config file. 'streaming/trading-analytics/redi' extended_parameters defaults NULL Specify optional params","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/create_RDP_Stream.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a RDP stream when an Eikon terminal is running — create_RDP_Stream","text":"RDP Stream object","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/create_RDP_Stream.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a RDP stream when an Eikon terminal is running — create_RDP_Stream","text":"","code":"if (FALSE) { # \\dontrun{ test <- create_RDP_Stream() test$connect() test$close() } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/flattenNestedlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Flatten a nested list put list format in data.table format way (don't mix up lists and vectors in one nested list) — flattenNestedlist","title":"Flatten a nested list put list format in data.table format way (don't mix up lists and vectors in one nested list) — flattenNestedlist","text":"Flatten nested list put list format data.table format way (mix lists vectors one nested list)","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/flattenNestedlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flatten a nested list put list format in data.table format way (don't mix up lists and vectors in one nested list) — flattenNestedlist","text":"","code":"flattenNestedlist(data)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/flattenNestedlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flatten a nested list put list format in data.table format way (don't mix up lists and vectors in one nested list) — flattenNestedlist","text":"data nested list","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/flattenNestedlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flatten a nested list put list format in data.table format way (don't mix up lists and vectors in one nested list) — flattenNestedlist","text":"list","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/flattenNestedlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flatten a nested list put list format in data.table format way (don't mix up lists and vectors in one nested list) — flattenNestedlist","text":"","code":"# Refinitiv:::flattenNestedlist(list(list(\"a\", \"b\"), c(1,2)))"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/get_rdp_streaming_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Show all available custom instruments that have been created — get_rdp_streaming_url","title":"Show all available custom instruments that have been created — get_rdp_streaming_url","text":"Show available custom instruments created","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/get_rdp_streaming_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show all available custom instruments that have been created — get_rdp_streaming_url","text":"","code":"get_rdp_streaming_url(RDObject = RefinitivJsonConnect(), debug = TRUE)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/get_rdp_streaming_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show all available custom instruments that have been created — get_rdp_streaming_url","text":"RDObject Refinitiv Data connection object, defaults RefinitivJsonConnect() debug show api calls defaults FALSE","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/get_rdp_streaming_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show all available custom instruments that have been created — get_rdp_streaming_url","text":"list custom Instruments created parameters","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/get_rdp_streaming_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show all available custom instruments that have been created — get_rdp_streaming_url","text":"","code":"if (FALSE) { # \\dontrun{ test <- get_rdp_streaming_url() } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/install_eikon.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Conda exists, if not instals miniconda, add the python eikon module to the python environment r-eikon — install_eikon","title":"Check if Conda exists, if not instals miniconda, add the python eikon module to the python environment r-eikon — install_eikon","text":"function can also used update required python packages can always use latest version pyhton packages numpy eikon. pure reinstall miniconda refinitiv python libraries set set reset = TRUE update = FALSE","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/install_eikon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Conda exists, if not instals miniconda, add the python eikon module to the python environment r-eikon — install_eikon","text":"","code":"install_eikon(   method = \"conda\",   conda = \"auto\",   envname = \"r-eikon\",   update = TRUE,   reset = FALSE,   restart_session = TRUE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/install_eikon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Conda exists, if not instals miniconda, add the python eikon module to the python environment r-eikon — install_eikon","text":"method Installation method. default, \"auto\" automatically finds method work local environment. Change default force specific installation method. Note \"virtualenv\" method available Windows. conda path conda executable. Use \"auto\" allow reticulate automatically find appropriate conda binary. See Finding Conda reticulate package details envname name conda environment used, default  r-eikon. Change! update boolean, allow rerun command update miniconda environment packages required update python packages numpy,eikon, refinitiv dataplatform defaults TRUE reset boolean, remove miniconda r-eikon environment reinstall miniconda, conda environment relevant packages. restart_session boolean, Restart R session installing (note occur within RStudio).","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/install_eikon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Conda exists, if not instals miniconda, add the python eikon module to the python environment r-eikon — install_eikon","text":"None","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/install_eikon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Conda exists, if not instals miniconda, add the python eikon module to the python environment r-eikon — install_eikon","text":"","code":"if (FALSE) { # \\dontrun{ install_eikon() } # }  if (FALSE) { # \\dontrun{ # when you get the error the refinitiv library cannot # be found anymore or errors during installation: install_eikon(update = FALSE, reset = TRUE) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/make_links_clickable.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert plain URLs in a string to clickable HTML links — make_links_clickable","title":"Convert plain URLs in a string to clickable HTML links — make_links_clickable","text":"internal helper function finds URL substrings input text wraps HTML anchor tags line break become clickable rendered.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/make_links_clickable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert plain URLs in a string to clickable HTML links — make_links_clickable","text":"","code":"make_links_clickable(text)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/make_links_clickable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert plain URLs in a string to clickable HTML links — make_links_clickable","text":"text character string.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/make_links_clickable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert plain URLs in a string to clickable HTML links — make_links_clickable","text":"character string plain URLs replaced clickable links.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/mapEikonTimefieldsToRd.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Eikon Time Fields to Refinitiv Data (RD) Fields — mapEikonTimefieldsToRd","title":"Map Eikon Time Fields to Refinitiv Data (RD) Fields — mapEikonTimefieldsToRd","text":"function translates vector column names Eikon format corresponding Refinitiv Data (RD) names based predefined mapping. column name mapping, kept unchanged.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/mapEikonTimefieldsToRd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Eikon Time Fields to Refinitiv Data (RD) Fields — mapEikonTimefieldsToRd","text":"","code":"mapEikonTimefieldsToRd(   cols = c(\"TIMESTAMP\", \"VOLUME\", \"HIGH\", \"LOW\", \"OPEN\", \"CLOSE\") )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/mapEikonTimefieldsToRd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Eikon Time Fields to Refinitiv Data (RD) Fields — mapEikonTimefieldsToRd","text":"cols character vector original column names Eikon format. Defaults c(\"TIMESTAMP\", \"VOLUME\", \"HIGH\", \"LOW\", \"OPEN\", \"CLOSE\").","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/mapEikonTimefieldsToRd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Eikon Time Fields to Refinitiv Data (RD) Fields — mapEikonTimefieldsToRd","text":"character vector translated column names Refinitiv Data (RD).","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/mapEikonTimefieldsToRd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Eikon Time Fields to Refinitiv Data (RD) Fields — mapEikonTimefieldsToRd","text":"","code":"mapEikonTimefieldsToRd() #>   TIMESTAMP      VOLUME        HIGH         LOW        OPEN       CLOSE  #> \"TIMESTAMP\" \"ACVOL_UNS\"  \"MKT_HIGH\"   \"MKT_LOW\"  \"MKT_OPEN\"   \"CLS_AUC\"  mapEikonTimefieldsToRd(c(\"TIMESTAMP\", \"UNKNOWN_COLUMN\", \"CLOSE\")) #>        TIMESTAMP   UNKNOWN_COLUMN            CLOSE  #>      \"TIMESTAMP\" \"UNKNOWN_COLUMN\"        \"CLS_AUC\""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetData.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to obtain data from Eikon. Based on the Eikon python function get_data — rd_GetData","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — rd_GetData","text":"function automatically chunks list rics chunks comply api limitations end rebuilds chunks single data.frame.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — rd_GetData","text":"","code":"rd_GetData(   RDObject = RefinitivJsonConnect(),   rics,   Eikonformulas,   Parameters = NULL,   raw_output = FALSE,   time_out = 60,   verbose = FALSE,   SpaceConvertor = NULL,   use_field_names_in_headers = FALSE,   SyncFields = FALSE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — rd_GetData","text":"RDObject Refinitiv Data connection object rics vector containing instrument RICS Eikonformulas vector containing character string Eikon Formulas Parameters named key value list setting parameters, Default: NULL raw_output return raw list chunk debugging purposes, default = FALSE time_out set maximum timeout Eikon server, default = 60 verbose boolean, set true print actual python call time stamp debugging. SpaceConvertor converts spaces variables name one following characters \".\", \",\" , \"-\", \"_\", default NULL use_field_names_in_headers boolean return request fieldnames stead titles SyncFields boolean, synchronize fields time axis (JSON!, supported Python (use GetHistory))","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — rd_GetData","text":"data.frame containing data.Eikon","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — rd_GetData","text":"Currently known bug reticulate package large integers. request made returns large integers reticulate package return -1 integers. See also issue https://github.com/rstudio/reticulate/issues/323 try indicated https://community.rstudio.com/t/large-integer-conversion--python--r/82568","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetData.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — rd_GetData","text":"https://developers.refinitiv.com/eikon-apis/eikon-data-api/docs?content=49692&type=documentation_item","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to obtain data from Eikon. Based on the Eikon python function get_data — rd_GetData","text":"","code":"if (FALSE) { # \\dontrun{ Refinitiv <- RDConnect(PythonModule = \"RD\") ex1 <- rd_GetData(RDObject = Refinitiv, rics = c(\"MMM\", \"III.L\"),              Eikonformulas = c(\"TR.PE(Sdate=0D)/*P/E (LTM) - Diluted Excl*/\"              , \"TR.CompanyName\"), verbose = TRUE)  ex2 <- rd_GetData( RDObject = Refinitiv, rics = \"AAPL.O\"                    , Eikonformulas = \"TR.CompanyMarketCap(Sdate=0D)/*Market Cap*/\"                    ) } # } if (FALSE) { # \\dontrun{ Refinitiv <- RDConnect(PythonModule = \"JSON\") ex1 <- rd_GetData(RDObject = Refinitiv, rics = c(\"MMM\", \"III.L\"),              Eikonformulas = c(\"TR.PE(Sdate=0D)/*P/E (LTM) - Diluted Excl*/\"              , \"TR.CompanyName\"), verbose = TRUE)  } # }  if (FALSE) { # \\dontrun{  rics <- c(\"AAPL.O\")  fields <- c(\"TR.IssueMarketCap(Scale=6,ShType=FFL)\",\"TR.FreeFloatPct()/100/*FreefloatWeight*/\"             ,\"TR.IssueSharesOutstanding(Scale=3)/*shares outstanding*/\"             ,\"TR.CLOSEPRICE(Adjusted=0)/*close*/\")   parameters <- list(\"Curn\" = \"USD\", \"SDate\" = \"2020-10-27\", \"EDate\" = \"2020-12-01\", \"Fill\" =\"None\")  test_json <- rd_GetData( RD = RDConnect(PythonModule = \"JSON\")                         , rics =  rics                         , Eikonformulas =  fields                         , Parameters = parameters                         , use_field_names_in_headers = TRUE                         , SyncFields = FALSE                         ) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetHistoricalPricing.html","id":null,"dir":"Reference","previous_headings":"","what":"GetHistoricalPricing — rd_GetHistoricalPricing","title":"GetHistoricalPricing — rd_GetHistoricalPricing","text":"get historical timeseries Refinitiv API","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetHistoricalPricing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GetHistoricalPricing — rd_GetHistoricalPricing","text":"","code":"rd_GetHistoricalPricing(   RDObject = RefinitivJsonConnect(),   universe = NULL,   interval = \"P1D\",   start = NULL,   end = NULL,   adjustments = NULL,   count = 20L,   fields = NULL,   sessions = NULL,   debug = FALSE,   SpaceConvertor = \".\" )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetHistoricalPricing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GetHistoricalPricing — rd_GetHistoricalPricing","text":"RDObject connection object, defaults RefinitivJsonConnect() universe entity universe e.g. RIC name interval consolidation interval ISO8601. defaults P1D, see also details start start date timestamp query. see also details end end date timestamp query. see also details adjustments character vector: list adjustment types (comma delimiter) tells system whether apply apply CORAX (Corporate Actions) events exchange/manual corrections historical time series data. see also details count integer maximum number data returned fields comma separated list fields returned response (interday) sessions list market session classification (comma delimiter) tells system return historical time series data based market session definition (market open/market close) debug boolean, TRUE prints url get requests SpaceConvertor converts spaces variables name one following characters \".\", \",\" , \"-\", \"_\", default NULL","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetHistoricalPricing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GetHistoricalPricing — rd_GetHistoricalPricing","text":"data.frame result","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetHistoricalPricing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GetHistoricalPricing — rd_GetHistoricalPricing","text":"Additional details parameters: ## RDObject: support connection objects : JSON: RefinitivJsonConnect refinitiv.data: RDConnect() ## Interval: support intervals : Intraday Summaries Intervals PT1M, PT5M, PT10M, PT30M, PT60M, PT1H Interday Summaries Tntervals P1D, P7D, P1W, P1M, P3M, P12M, P1Y. interval specified, back-end return lowest supported interday interval. ## start & end: Intraday Summaries Interval  Interday Summaries Tntervals  ## adjustments: list adjustment types (comma delimiter) tells system whether apply apply CORAX (Corporate Actions) events exchange/manual corrections historical time series data. unspecified: response controlled back-end service proper adjustments  response                                clients know adjustment types applied default.                                case, returned data applied exchange                                manual corrections well applied CORAX adjustments. specified: means clients want get specific adjustment types applied even unadjusted. Normally, back-end strictly serve clients need. However, back-end support , back-end can still return form back-end supports proper adjustments response together status block (applicable) instead error message. supported values adjustments : unadjusted apply exchange/manual corrections CORAX exchangeCorrection Apply exchange correction adjustment historical pricing manualCorrection Apply manual correction adjustment historical pricing .e. annotations made content analysts CCH Apply Capital Change adjustment historical Pricing due Corporate Actions e.g. stock split CRE Apply Currency Redenomination adjustment redenomination currency RPO Apply Reuters Price adjustment adjust historical price volume RTS Apply Reuters TimeSeries adjustment adjust historical price volume ### Notes: 1 Summaries data always exchangeCorrection manualCorrection applied. request explicitly asked           uncorrected data, status block returned along corrected data saying \"Uncorrected summaries currently supported\". 2 unadjusted ignored values specified. ### Limitations: Adjustment behaviors listed limitation section may changed improved future. 1 case combination correction types specified (.e. exchangeCorrection manualCorrection), correction types applied data applicable event types. 2 case combination CORAX specified (.e. CCH, CRE, RPO, RTS), CORAX applied data applicable event types. ## count: maximum number data returned. count smaller total amount data time range specified, data (oldest) delivered. retrieve available data time range specified, parameter specified. returned data less number requested enough data time range specified. specified, count default 20 unless start end parameters also specified. parameter maximum limit Interday summaries interval. minimum value parameter 1. Negative value supported. See details \"Start / End / Count Behavior\" Readme.","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetHistoricalPricing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"GetHistoricalPricing — rd_GetHistoricalPricing","text":"","code":"if (FALSE) { # \\dontrun{ # run with python refinitiv data Vodafone <- rd_GetHistoricalPricing(universe = \"VOD.L\", interval = \"P1D\" , count = 20L, RDObject = RDConnect(PythonModule = \"RD\"))  # run with r json Vodafone2 <- rd_GetHistoricalPricing(universe = \"VOD.L\", interval = \"P1D\" , count = 20L, RDObject = RDConnect(PythonModule = \"JSON\"))  identical(Vodafone, Vodafone2)  # run wit a subset of fields Vodafone <- rd_GetHistoricalPricing(universe = \"VOD.L\", interval = \"P1D\", count = 20L , fields =c(\"BID\",\"ASK\",\"OPEN_PRC\",\"HIGH_1\",\"LOW_1\",\"TRDPRC_1\",\"NUM_MOVES\",\"TRNOVR_UNS\") )   # test for interday  Vodafone <- rd_GetHistoricalPricing(universe = \"VOD.L\", interval = \"PT1M\", count = 20L , RDObject = RefinitivJsonConnect())   # 1 minute - Count - All Sessions  Vodafone <- rd_GetHistoricalPricing( universe = c(\"VOD.L\", \"AAPL.O\")                                     , interval = \"PT1M\", count = 500L                                     , sessions= c(\"pre\",\"normal\",\"post\")                                     , RDObject = RefinitivJsonConnect())    # test with custom instrument you need to construct a custom instrument first  # intraday  Vodafone <- rd_GetHistoricalPricing( universe = \"S)lseg_epam4.ABCDE-123456\"  , interval = \"P1D\", count = 20)   # interday  Vodafone <- rd_GetHistoricalPricing( universe = \"S)lseg_epam4.ABCDE-123456\"  , interval = \"PT1M\", count = 500L)   } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetHistory.html","id":null,"dir":"Reference","previous_headings":"","what":"The get_history function allows you to retrieve pricing history, as well as Fundamental and Reference data history through a single function call. — rd_GetHistory","title":"The get_history function allows you to retrieve pricing history, as well as Fundamental and Reference data history through a single function call. — rd_GetHistory","text":"get_history function allows retrieve pricing history, well Fundamental Reference data history single function call.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetHistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The get_history function allows you to retrieve pricing history, as well as Fundamental and Reference data history through a single function call. — rd_GetHistory","text":"","code":"rd_GetHistory(   RD = RDConnect(),   universe = NULL,   fields = NULL,   parameters = NULL,   interval = NULL,   start = NULL,   end = NULL,   adjustments = NULL,   count = NULL,   use_field_names_in_headers = TRUE,   SpaceConvertor = NULL,   debug = FALSE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetHistory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The get_history function allows you to retrieve pricing history, as well as Fundamental and Reference data history through a single function call. — rd_GetHistory","text":"RD Refinitiv data object (currently RDconnect()) universe Instruments request    str vector fields Fields request    str vector parameters named key value list setting parameters, Default: NULL interval Date interval. Supported intervals : [\"minute\", \"1min\", \"5min\", \"10min\", \"30min\", \"60min\", \"hourly\", \"1h\", \"daily\", \"1d\", \"1D\", \"7D\", \"7d\", \"weekly\", \"1W\", \"monthly\", \"1M\", \"quarterly\", \"3M\", \"6M\", \"yearly\", \"12M\", \"1Y\"] start start date timestamp requested history    str, date end end date timestamp requested history    str, date adjustments Tells system whether apply apply CORAX (Corporate Actions) events exchange/manual corrections price volume adjustment according trade/quote qualifier summarization actions historical time series data. Possible values [\"exchangeCorrection\", \"manualCorrection\", \"CCH\", \"CRE\", \"RTS\", \"RPO\", \"unadjusted\", \"qualifiers\"] count maximum number data points returned. Values range: 1 - 10000 use_field_names_in_headers boolean     True - returns field name column headers data instead title, advisable leave setting TRUE prevent issue two date columns using specific fields like e.g. SpaceConvertor converts spaces variables name one following characters \".\", \",\" , \"-\", \"_\", default NULL, use compatability eikon debug boolean, default = FALSE, TRUE, prints url used retrieve data","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetHistory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The get_history function allows you to retrieve pricing history, as well as Fundamental and Reference data history through a single function call. — rd_GetHistory","text":"data.frame","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetHistory.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The get_history function allows you to retrieve pricing history, as well as Fundamental and Reference data history through a single function call. — rd_GetHistory","text":"function currently work progress works RDConnect (python), directJson available function. #section regarding adjustments parameters: vector adjustment types (comma delimiter) tells system whether  apply apply CORAX (Corporate Actions) events  exchange/manual corrections historical time series data. supported values adjustments : \"unadjusted\": apply exchange/manual corrections CORAX \"exchangeCorrection\": Apply exchange correction adjustment historical pricing \"manualCorrection\": Apply manual correction adjustment historical pricing .e. annotations made content analysts \"CCH\": Apply Capital Change adjustment historical Pricing due Corporate Actions e.g. stock split \"CRE\":Apply Currency Redenomination adjustment redenomination currency \"RPO\":Apply Reuters Price adjustment adjust historical price volume \"RTS\":Apply Reuters TimeSeries adjustment adjust historical price volume \"qualifiers\":Apply price volume adjustment historical pricing according trade/quote qualifier summarization actions","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_GetHistory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The get_history function allows you to retrieve pricing history, as well as Fundamental and Reference data history through a single function call. — rd_GetHistory","text":"","code":"if (FALSE) { # \\dontrun{ RDObject <-  RDConnect(\"your api key here\", PythonModule = \"JSON\") timeseries1 <-  rd_GetHistory(universe=c(\"AAPL.O\", \"NVDA.O\")) timeseries2 <- rd_GetHistory(universe=\"GOOG.O\"                             ,fields = c(\"BID\", \"ASK\"),interval=\"tick\",count=5)  test <- rd_GetHistory(universe= \"AAPL.O\"                      , fields = c(\"TR.IssueMarketCap(Scale=6,ShType=FFL)\"                        ,\"TR.FreeFloatPct()/100/*FreefloatWeight*/\"                        ,\"TR.IssueSharesOutstanding(Scale=3)/*shares outstanding*/\"                        ,\"TR.CLOSEPRICE(Adjusted=0)/*close*/\")                      , parameters = list(\"Curn\" = \"USD\"                      , \"SDate\" = \"2020-10-27\", \"EDate\" = \"2020-12-01\"))  test <- rd_GetHistory(universe = c(\"GOOG.O\",\"AAPL.O\")                        , fields = c(\"TR.Revenue\",\"TR.GrossProfit\")                        , parameters = list(\"SDate\" = \"0CY\", \"Curn\" = \"CAD\")) test <-  rd_GetHistory(universe = c(\"GOOG.O\",\"AAPL.O\")                       , fields = c(\"TR.PriceTargetMean(SDate:0CY)\",\"TR.LOWPRICE(SDate:0d)\"))   test <- rd_GetHistory( universe = c(\"GOOG.O\",\"MSFT.O\",\"FB.O\",\"AMZN.O\")                      ,fields = c(\"TR.Revenue.date\",\"TR.Revenue\",\"TR.GrossProfit\")                      ,parameters = list(\"Scale\" = 6,\"SDate\" = 0                      ,\"EDate\" = -3,\"FRQ\" = \"FY\", \"Curn\" = \"EUR\")) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_ManageCustomInstruments.html","id":null,"dir":"Reference","previous_headings":"","what":"CREATE, GET, UPDATE or DELETE a custom instrument — rd_ManageCustomInstruments","title":"CREATE, GET, UPDATE or DELETE a custom instrument — rd_ManageCustomInstruments","text":"CREATE, GET, UPDATE DELETE custom instrument","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_ManageCustomInstruments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CREATE, GET, UPDATE or DELETE a custom instrument — rd_ManageCustomInstruments","text":"","code":"rd_ManageCustomInstruments(   RDObject = RefinitivJsonConnect(),   symbol = NULL,   formula = NULL,   basket = NULL,   udc = NULL,   currency = NULL,   instrumentName = NULL,   exchangeName = NULL,   holidays = NULL,   timeZone = NULL,   description = NULL,   operation = c(\"CREATE\", \"GET\", \"UPDATE\", \"DELETE\"),   UUID = getOption(\".RefinitivUUID\"),   debug = FALSE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_ManageCustomInstruments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CREATE, GET, UPDATE or DELETE a custom instrument — rd_ManageCustomInstruments","text":"RDObject Refinitiv Data connection object, defaults RefinitivJsonConnect() symbol character instrument symbol format \"S)someSymbol.YOURUUID\" formula formula consisting rics (fields can specified comma) basket rics weights use CustomInstrumentBasketBuilder() udc optional user defined continuation object returned CustomInstrumentUDCBuilder() currency 3-letter code currency instrument, e.g. GBP instrumentName Human-readable name instrument. Maximum 16 characters. exchangeName 4-letter code listing exchange. holidays List custom calendar definitions. use CustomInstrumentHolidayBuilder() required timeZone character Time Series uses odd custom 3-letter value time zone IDs, e.g. \"LON\" London. description character Free text field user put notes text. 1000 characters. operation character one \"CREATE\", \"GET\", \"UPDATE\", \"DELETE\" UUID character  Eikon UUID can found : Eikon Terminal –> help –> –> user details: UUID e.g. ABCDE-123456 debug boolean prints intermediate api calls console","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_ManageCustomInstruments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CREATE, GET, UPDATE or DELETE a custom instrument — rd_ManageCustomInstruments","text":"list data result request.","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_ManageCustomInstruments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CREATE, GET, UPDATE or DELETE a custom instrument — rd_ManageCustomInstruments","text":"","code":"if (FALSE) { # \\dontrun{  # Create Simple Instrument  rd_ManageCustomInstruments(operation = \"CREATE\", symbol = \"testAAPLandAMZN\",                               formula = \"AAPL.O + AMZN.O\")  #'  #get instrument details  rd_ManageCustomInstruments(operation = \"GET\", symbol = \"testAAPLandAMZN\")   # Update Instrument formula  rd_ManageCustomInstruments(operation = \"UPDATE\", symbol = \"testAAPLandAMZN\",                               formula = \"AAPL.O + 2 * AMZN.O\")  #Delete  rd_ManageCustomInstruments(operation = \"DELETE\", symbol = \"testAAPLandAMZN\")  #build a custom instrument with a basket basket <- CustomInstrumentBasketBuilder(RICs = c(\"AAPL.O\", \"AMZN.O\"), Weights = c(0.5, 0.5))  rd_ManageCustomInstruments(operation = \"CREATE\", symbol = \"InterestingBasket\",                               basket = basket, currency = \"USD\")  #update the basket with some holidays holidays <-  CustomInstrumentHolidayBuilder(dates = c(\"2023-12-01\", \"2023-12-31\")        , reasons = c(\"Special Bank Holiday 1\", \"Special Bank Holiday 2\"))   rd_ManageCustomInstruments(operation = \"UPDATE\", symbol = \"InterestingBasket\",                              holidays = holidays )  #Delete instrument  rd_ManageCustomInstruments(operation = \"DELETE\", symbol = \"InterestingBasket\")  RealInstrumentName <- CorrectCustomInstrument(\"InterestingBasket\") } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_OutputProcesser.html","id":null,"dir":"Reference","previous_headings":"","what":"Process output from refintiv data to r data.frame output — rd_OutputProcesser","title":"Process output from refintiv data to r data.frame output — rd_OutputProcesser","text":"Process output refintiv data r data.frame output","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_OutputProcesser.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process output from refintiv data to r data.frame output — rd_OutputProcesser","text":"","code":"rd_OutputProcesser(   x,   use_field_names_in_headers = TRUE,   NA_cleaning = TRUE,   SpaceConvertor = NULL )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_OutputProcesser.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process output from refintiv data to r data.frame output — rd_OutputProcesser","text":"x refinitiv data platform output use_field_names_in_headers boolean wheater return titles field (formulas) headers NA_cleaning clean NA return data","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_OutputProcesser.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process output from refintiv data to r data.frame output — rd_OutputProcesser","text":"data.frame","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_OutputProcesser.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process output from refintiv data to r data.frame output — rd_OutputProcesser","text":"","code":"if (FALSE) { # \\dontrun{  EndPoint = \"data/datagrid/beta1/\"  payload <- list( 'universe'= as.list(c(\"GOOG.O\", \"NVDA.O\"))                , 'fields'= as.list(c('TR.CLOSE', 'TR.OPEN'))                , 'parameters'=list('SDate'= '2022-10-05', 'EDate'= '2022-11-05')                , 'output'= 'Col,T|Va,Row,In,date|'                )  response <- send_json_request(json = payload, service = \"rdp\" , EndPoint = EndPoint, request_type = \"POST\") Output <- rd_OutputProcesser(response) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_SearchCustomInstruments.html","id":null,"dir":"Reference","previous_headings":"","what":"Show all available custom instruments that have been created — rd_SearchCustomInstruments","title":"Show all available custom instruments that have been created — rd_SearchCustomInstruments","text":"Show available custom instruments created","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_SearchCustomInstruments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show all available custom instruments that have been created — rd_SearchCustomInstruments","text":"","code":"rd_SearchCustomInstruments(RDObject = RefinitivJsonConnect(), debug = TRUE)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_SearchCustomInstruments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show all available custom instruments that have been created — rd_SearchCustomInstruments","text":"RDObject Refinitiv Data connection object, defaults RefinitivJsonConnect() debug show api calls defaults false","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_SearchCustomInstruments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show all available custom instruments that have been created — rd_SearchCustomInstruments","text":"list custom Instruments created parameters","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_SearchCustomInstruments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show all available custom instruments that have been created — rd_SearchCustomInstruments","text":"","code":"if (FALSE) { # \\dontrun{ test <- rd_SearchCustomInstruments() } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_VerifyToken.html","id":null,"dir":"Reference","previous_headings":"","what":"Verify the Validity of a JWT Access Token — rd_VerifyToken","title":"Verify the Validity of a JWT Access Token — rd_VerifyToken","text":"`rd_VerifyToken` function checks whether given JWT (JSON Web Token) still valid inspecting expiration time (`exp` claim). decodes token's payload without verifying signature.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_VerifyToken.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Verify the Validity of a JWT Access Token — rd_VerifyToken","text":"","code":"rd_VerifyToken(token)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_VerifyToken.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Verify the Validity of a JWT Access Token — rd_VerifyToken","text":"token character string representing JWT access token.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_VerifyToken.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Verify the Validity of a JWT Access Token — rd_VerifyToken","text":"logical value: `TRUE` token valid (.e., expired). `FALSE` token expired invalid.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_VerifyToken.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Verify the Validity of a JWT Access Token — rd_VerifyToken","text":"","code":"if (FALSE) { # \\dontrun{ # Example token (replace with a real token) access_token <- \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" is_valid <- rd_VerifyToken(access_token) print(is_valid) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_check_proxy_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if refinitiv proxy url is alive — rd_check_proxy_url","title":"Check if refinitiv proxy url is alive — rd_check_proxy_url","text":"Check refinitiv proxy url alive","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_check_proxy_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if refinitiv proxy url is alive — rd_check_proxy_url","text":"","code":"rd_check_proxy_url(port = 9060, debug = TRUE)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_check_proxy_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if refinitiv proxy url is alive — rd_check_proxy_url","text":"port 9060 9000 debug boolean TRUE False","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_check_proxy_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if refinitiv proxy url is alive — rd_check_proxy_url","text":"api status code version","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_check_proxy_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if refinitiv proxy url is alive — rd_check_proxy_url","text":"","code":"if (FALSE) { # \\dontrun{ test <- rd_check_proxy_url(port = 9000) test <- rd_check_proxy_url(port = 9060) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_news_headlines.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve News Headlines from a Refinitiv RDP (JSON) Connection — rd_get_news_headlines","title":"Retrieve News Headlines from a Refinitiv RDP (JSON) Connection — rd_get_news_headlines","text":"function constructs HTTP GET query retrieve news headlines Refinitiv RDP service. builds query string provided parameters using build_get_query_string() sends GET request via send_json_request().","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_news_headlines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve News Headlines from a Refinitiv RDP (JSON) Connection — rd_get_news_headlines","text":"","code":"rd_get_news_headlines(   RDObject = RefinitivJsonConnect(),   query = NULL,   limit = 10L,   sort = \"NewToOld\",   relevancy = \"All\",   cursor = NULL,   dateFrom = NULL,   dateTo = NULL,   raw_output = FALSE,   debug = TRUE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_news_headlines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve News Headlines from a Refinitiv RDP (JSON) Connection — rd_get_news_headlines","text":"RDObject connection object returned RefinitivJsonConnect(). Defaults RefinitivJsonConnect() supplied. query character string (vector) representing search query. limit integer indicating maximum number headlines retrieve. Maximum allowed value 100. sort optional sort order (e.g. \"NewToOld\"). specified, service default used. relevancy optional relevancy filter (e.g. \"\" \"High\"). cursor optional pagination cursor. dateFrom optional start date/time (ISO 8601 format). dateTo optional end date/time (ISO 8601 format). raw_output TRUE, returns raw JSON response; otherwise, response flattened data.frame. debug TRUE, prints debugging messages.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_news_headlines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve News Headlines from a Refinitiv RDP (JSON) Connection — rd_get_news_headlines","text":"data.frame flattened fields, raw JSON raw_output = TRUE.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_news_headlines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve News Headlines from a Refinitiv RDP (JSON) Connection — rd_get_news_headlines","text":"query parameters may include various tokens Reuters Instrument Codes (RIC), language codes, explicit free-text tokens (using quotes), date ranges. addition, function supports pagination via cursor. Examples queries include: - **Explicit FreeText (use quotes):**   Obtains headlines stories containing text \"electric car\" \"electric vehicle\" - **SearchIn token (HeadlineOnly):**   Obtains headlines stories \"Reports\" \"Announces\" title, limiting search headlines - **SearchIn token (FullStory):**   Obtains headlines stories \"inflation\" searching full story text - **Language Filter:**   French headlines: English headlines (disambiguated language prefix \"L:\"): - **Reuters Instrument Code (RIC):** - **Combination RIC Relevancy:** - **Combination Company Name, RIC Relevancy:** - **Read News (M:1RS):** - **Newswire Specific RCS Codes (MRG):** - **Explicit Token News Source (NS):** - **Increasing Limit:** - **Pagination using Cursor:** - **Daterange using LAST syntax:** - **Daterange syntax:** - **Daterange explicit \",\" syntax:** **Note:** parameter limit must exceed 100. value greater 100 provided, function throw error. raw_output = TRUE, list raw JSON responses returned.","code":"rd_get_news_headlines(query = \"\\\"electric car\\\" or \\\"electric vehicle\\\"\") rd_get_news_headlines(query = \"\\\"Reports\\\" or \\\"Announces\\\" and searchIn:HeadlineOnly\") rd_get_news_headlines(query = \"\\\"inflation\\\" and searchIn:FullStory\") rd_get_news_headlines(query = \"LFR\") rd_get_news_headlines(query = \"L:EN\") rd_get_news_headlines(query = \"MSFT.O\") rd_get_news_headlines(query = \"MSFT.O\", relevancy = \"High\") rd_get_news_headlines(query = \"LEN and \\\"Microsoft\\\" and MSFT.O\", relevancy = \"High\") rd_get_news_headlines(query = \"M:1RS\") rd_get_news_headlines(query = \"MRG\") rd_get_news_headlines(query = \"NS:RTRS or NS:PRN or NS:TWTR\") rd_get_news_headlines(query = \"\\\"stock repurchase\\\"\", limit = 50) rd_get_news_headlines(query = \"MSFT.O\", cursor = \"H4sIAAAAAAAA...\", limit = 10) rd_get_news_headlines(query = \"MRG last 5 days\") rd_get_news_headlines(query = \"M:1RS BETWEEN 2024-03 AND 2024-04\") rd_get_news_headlines(query = \"Major breaking news\", dateFrom = \"2024-04-13T00:00:00Z\", dateTo = \"2024-04-14T00:00:00Z\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_news_story.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Full News Story from a Refinitiv RDP (JSON) Connection — rd_get_news_story","title":"Retrieve Full News Story from a Refinitiv RDP (JSON) Connection — rd_get_news_story","text":"function retrieves full news story identified story ID via Refinitiv JSON connection. RDP response story text may found different places:","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_news_story.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Full News Story from a Refinitiv RDP (JSON) Connection — rd_get_news_story","text":"","code":"rd_get_news_story(   RDObject = RefinitivJsonConnect(),   story_id = NULL,   raw_output = FALSE,   debug = FALSE,   renderHTML = FALSE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_news_story.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Full News Story from a Refinitiv RDP (JSON) Connection — rd_get_news_story","text":"RDObject connection object returned RefinitivJsonConnect(). Defaults RefinitivJsonConnect() supplied. story_id Vector story IDs. raw_output TRUE, returns raw list responses. debug TRUE, prints debugging messages. renderHTML TRUE, function open combined HTML browser viewer, also return HTML string.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_news_story.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Full News Story from a Refinitiv RDP (JSON) Connection — rd_get_news_story","text":"raw_output = FALSE (default), character vector story HTML   (single combined HTML string renderHTML = TRUE). Otherwise, raw list   responses.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_news_story.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Full News Story from a Refinitiv RDP (JSON) Connection — rd_get_news_story","text":"- response comes legacy UDF service, story expected   story$storyHtml element. - response comes RDP service, content located   newsItem$contentSet. case, function first checks HTML content   newsItem$contentSet$inlineXML (available) , ,   newsItem$contentSet$inlineData. renderHTML TRUE, plain URLs resulting HTML converted clickable links via helper function make_links_clickable() (define elsewhere package), combined HTML opened viewer.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_top_news.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Top News Packages from a Refinitiv RDP (JSON) Connection, Then Fetch Stories — rd_get_top_news","title":"Retrieve Top News Packages from a Refinitiv RDP (JSON) Connection, Then Fetch Stories — rd_get_top_news","text":"function retrieves top news packages Refinitiv RDP service using endpoint `/data/news/v1/top-news`. endpoint returns nested JSON structure containing top news groups. group contains one pages, page represents specific news category.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_top_news.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Top News Packages from a Refinitiv RDP (JSON) Connection, Then Fetch Stories — rd_get_top_news","text":"","code":"rd_get_top_news(   RDObject = RefinitivJsonConnect(),   group = NULL,   page = NULL,   raw_output = FALSE,   debug = FALSE )"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_top_news.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Top News Packages from a Refinitiv RDP (JSON) Connection, Then Fetch Stories — rd_get_top_news","text":"RDObject connection object returned RefinitivJsonConnect(). supplied, defaults RefinitivJsonConnect(). group Optional character string (regular expression) filter top news groups name. page Optional character string (regular expression) filter pages name. raw_output TRUE, returns raw JSON response (list) page named list keyed topNewsId. debug TRUE, prints debugging messages.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_top_news.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Top News Packages from a Refinitiv RDP (JSON) Connection, Then Fetch Stories — rd_get_top_news","text":"data frame (default) one row per story following columns: group page_name po revisionId revisionDate topNewsId storyId title (headline) snippet (short text summary) raw_output = TRUE, named list raw responses, keyed topNewsId, returned.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_get_top_news.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve Top News Packages from a Refinitiv RDP (JSON) Connection, Then Fetch Stories — rd_get_top_news","text":"**Overview Top News Groups Pages:** - **Main**: Typically includes pages \"Front Page\", \"Central Banks & Global Economy\",   \"Sustainable Finance\", \"World News\", \"Regulation & Compliance\". - **Breakingviews**: Generally contains page \"Reuters Breakingviews\". - **Banking & Finance**: Often includes pages like \"Financial Services\", \"Investment Banking\",   \"IFR\", \"Digital Finance & Crypto\". - **Markets**: Usually features pages \"Global Markets\", \"Foreign Exchange\",   \"Fixed Income\", \"Emerging Markets\", \"IFR\". - **Commodities**: Contains pages like \"Commodities\", \"Energy\", \"Metals\",   \"Agricultural Commodities\", \"Global Gas, Power & LNG\". - **Industries**: Contains pages \"Technology, Media & Telecoms\",   \"Heavy Industry & Transport\", \"Consumer & Retail\", \"Healthcare & Pharma\". - **Companies**: Typically includes sub-groups \"U.S. Companies\", \"European Companies\",   \"Asian Companies\". - **Regional**: Groups news region pages \"Australia & New Zealand\",   \"Japan & Koreas\", \"Greater China\", \"Southeast Asia\", \"India & South Asia\",   \"Middle East & Africa\", \"Europe & Russia\", \"United Kingdom\", \"Latin America\",   \"United States\", \"Canada\". - **National Languages**: Offers news various languages pages   \"日本語トップニュース\", \"路透中文新闻\", \"Deutschland\", \"L’essentiel de l'actualité\",   \"Brasil\", \"Россия\". - **Sports & Lifestyle**: Contains pages like \"Sport\" \"Lifestyle & Entertainment\". - **AWP Top News**: Includes pages \"AWP German Top News\" \"AWP French Top News\". addition returning key fields top news packages (group, page name, revision information, **topNewsId**), function makes additional GET call page calling `/data/news/v1/top-news/<topNewsId>`. call retrieves actual story details including story identifier (**storyId**), title (**text**), summary (**snippet**) can subsequently used rd_get_news_story.","code":""},{"path":[]},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_handshake.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Bearer Key from Terminal — rd_handshake","title":"Get Bearer Key from Terminal — rd_handshake","text":"`rd_handshake` function manages bearer tokens verifying existing token's validity using `rd_VerifyToken`. token invalid expired, `force = TRUE`, performs handshake request new token Refinitiv API. function stores new token expiration time future use.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_handshake.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Bearer Key from Terminal — rd_handshake","text":"","code":"rd_handshake(debug = FALSE, force = TRUE)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_handshake.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Bearer Key from Terminal — rd_handshake","text":"debug Logical. `TRUE`, prints URLs additional debugging information JSON requests. Defaults `FALSE`. force Logical. `TRUE`, forces fetching new token even existing valid token present. Defaults `TRUE`.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_handshake.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Bearer Key from Terminal — rd_handshake","text":"list following fields: access_token Bearer token (key). expires_in Number seconds token expires. token_type Type token (e.g., \"bearer\").","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_handshake.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Bearer Key from Terminal — rd_handshake","text":"function first checks existing bearer token present valid. , `force = FALSE`, reuses existing token. Otherwise, initiates handshake Refinitiv API obtain new token. new token expiration time stored global options subsequent use.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/rd_handshake.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Bearer Key from Terminal — rd_handshake","text":"","code":"if (FALSE) { # \\dontrun{ # Fetch a new token regardless of existing tokens response <- rd_handshake(force = TRUE, debug = TRUE) print(response) } # }"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/replaceInList.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace items in nested list — replaceInList","title":"Replace items in nested list — replaceInList","text":"Replace items nested list","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/replaceInList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace items in nested list — replaceInList","text":"","code":"replaceInList(x, FUN, ...)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/replaceInList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace items in nested list — replaceInList","text":"x list FUN function operate list ... pass parameters","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/replaceInList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace items in nested list — replaceInList","text":"list","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/replaceInList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace items in nested list — replaceInList","text":"","code":"x <- list(list(NA, NULL, NULL), list(\"a\", \"b\", \"c\")) # test <- Refinitiv:::replaceInList(x, function(x)if(is.null(x))NA else x)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/retry.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to retry failed functions after a time out of 5 seconds. Especially useful for failed api calls. — retry","title":"Function to retry failed functions after a time out of 5 seconds. Especially useful for failed api calls. — retry","text":"Function retry failed functions time 5 seconds. Especially useful failed api calls.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/retry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to retry failed functions after a time out of 5 seconds. Especially useful for failed api calls. — retry","text":"","code":"retry(retryfun, max = 2, init = 0)"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/retry.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to retry failed functions after a time out of 5 seconds. Especially useful for failed api calls. — retry","text":"retryfun function retry. max maximum number retries, default = 2 init initial state retries always left zero, default = zero","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/retry.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to retry failed functions after a time out of 5 seconds. Especially useful for failed api calls. — retry","text":"None","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/retry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to retry failed functions after a time out of 5 seconds. Especially useful for failed api calls. — retry","text":"","code":"retry(sum(1,\"a\"), max = 2) #> api request failed, automatically retrying time 1/2 error received: Error in sum(1, \"a\"): invalid 'type' (character) of argument #> api request failed, automatically retrying time 2/2 error received: Error in sum(1, \"a\"): invalid 'type' (character) of argument #> [1] NA"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/translate_to_iso8601_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate Frequency to ISO 8601 Duration — translate_to_iso8601_duration","title":"Translate Frequency to ISO 8601 Duration — translate_to_iso8601_duration","text":"function translates given frequency string 'minute', 'hour', 'daily', 'weekly', etc. corresponding ISO 8601 duration format (e.g., 'PT1M', 'P1D', 'P1W'). defaults 'P1D' (daily) input recognized.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/translate_to_iso8601_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate Frequency to ISO 8601 Duration — translate_to_iso8601_duration","text":"","code":"translate_to_iso8601_duration(frequency = \"daily\")"},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/translate_to_iso8601_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate Frequency to ISO 8601 Duration — translate_to_iso8601_duration","text":"frequency character string representing time frequency. Accepted values include 'minute', 'hour', 'daily', 'weekly', 'monthly', 'quarterly', 'yearly'. Default 'daily'.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/translate_to_iso8601_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate Frequency to ISO 8601 Duration — translate_to_iso8601_duration","text":"character string representing ISO 8601 duration equivalent input frequency.","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/translate_to_iso8601_duration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Translate Frequency to ISO 8601 Duration — translate_to_iso8601_duration","text":"function specially helps transitioning legacy EikonGetTimeseries Code get rd_GetHistoricalPricing() using function one need worry correct interval","code":""},{"path":"https://greengrassblueocean.github.io/RefinitivR/reference/translate_to_iso8601_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate Frequency to ISO 8601 Duration — translate_to_iso8601_duration","text":"","code":"translate_to_iso8601_duration('minute')   # Returns \"PT1M\" #> [1] \"PT1M\" translate_to_iso8601_duration('hour')     # Returns \"PT1H\" #> [1] \"PT1H\" translate_to_iso8601_duration('weekly')   # Returns \"P1W\" #> [1] \"P1W\" translate_to_iso8601_duration('unknown')  # Returns \"P1D\" (default) #> [1] \"P1D\""}]
