name: test-coverage

on:
  push:
    branches: [main, master]
  pull_request:
  schedule:
    - cron: '0 6 * * *'

permissions:
  contents: read

jobs:
  test-coverage:
    runs-on: windows-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
          r-version: '4.3'  # Specify a recent R version for consistency

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Setup Conda Environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-activate-base: false  # Avoid base env conflicts
          activate-environment: "r-eikon"
          python-version: "3.10"

      - name: Install Python Packages
        shell: bash -el {0}  # Ensure Conda commands work on Windows
        run: |
          conda install -n r-eikon -c conda-forge docutils pandas scipy matplotlib ipython tabulate plotly psutil numpy
          pip install kaleido wrapt
          conda list -n r-eikon

      - name: Install R Dependencies
        run: |
          Rscript -e "install.packages(c('covr', 'testthat', 'remotes', 'reticulate', 'xml2'), repos = 'https://cran.rstudio.com/')"

      - name: Configure Reticulate with Conda Environment
        run: |
          Rscript -e "library(reticulate); use_condaenv('r-eikon', required = TRUE); py_config()"

      - name: Install Package Dependencies
        run: |
          Rscript -e "remotes::install_deps(dependencies = TRUE, upgrade = 'always')"

      - name: Run Tests and Generate Coverage
        run: |
          Rscript -e "library(testthat); library(covr); testthat::test_dir('tests/testthat'); cov <- package_coverage(quiet = FALSE, clean = FALSE); print(cov); covr::to_cobertura(cov, file = 'cobertura.xml')"
        continue-on-error: true  # Allow workflow to continue even if tests fail

      - name: Verify Coverage Output
        shell: bash
        run: |
          if [ -f "cobertura.xml" ]; then
            echo "Coverage file generated successfully:"
            cat cobertura.xml
          else
            echo "Error: cobertura.xml not found!"
            exit 1
          fi

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./cobertura.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true  # Fail the CI if upload fails
