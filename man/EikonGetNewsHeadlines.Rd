% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EikonNews.R
\name{EikonGetNewsHeadlines}
\alias{EikonGetNewsHeadlines}
\title{Returns a list of news headlines}
\usage{
EikonGetNewsHeadlines(
  EikonObject = EikonConnect(),
  query = NULL,
  count = 10L,
  repository = c("NewsWire", "NewsRoom", "WebNews"),
  date_from = NULL,
  date_to = NULL,
  raw_output = FALSE,
  debug = FALSE
)
}
\arguments{
\item{EikonObject}{Connection Object result from EikonConnect()}

\item{query}{character optional News headlines search criteria. The text can contain RIC codes, company names, country names and operators (AND, OR, NOT, IN, parentheses and quotes for explicit searchâ€¦).Tip: Append 'R:' in front of RIC names to improve performance.}

\item{count}{integer, optional Max number of headlines retrieved.Value Range: [1-100].Default: 10}

\item{repository}{character, vector of characters, optionalPossible values: c("NewsWire","NewsRoom","WebNews") For "NewsRoom" and "WebNews" repositories a query must be defined.}

\item{date_from}{string or date, optional Beginning of date range. String format is: '\%Y-\%m-\%dT\%H:\%M:\%S'. e.g. 2016-01-20T15:04:05.}

\item{date_to}{string or datetime, optional End of date range. String format is: '\%Y-\%m-\%dT\%H:\%M:\%S'. e.g. 2016-01-20T15:04:05.}

\item{raw_output}{boolean if TRUE provide only the raw downloaded info from Eikon}

\item{debug}{boolean if TRUE prints out the python call to the console}
}
\value{
Returns a data frame of news headlines with the following columns:
\itemize{
 \item{"Index" }{Timestamp of the publication time}
 \item{"version_created" }{Date of the latest update on the news}
 \item{"text" }{Text of the Headline}
 \item{"story_id" }{Identifier to be used to retrieve the full story using the get_news_story legacy}
 \item{"source_code" }{Second news identifier}
}
}
\description{
Returns a list of news headlines
}
\examples{
\dontrun{
 Eikon <- Refinitiv::EikonConnect()
 headlines <- EikonGetNewsHeadlines( EikonObject = Eikon
                                   , query = "R:MSFT.O", count = 2)
}

\dontrun{
  EikonJson <- RefinitivJsonConnect()
  headlines <- EikonGetNewsHeadlines( EikonObject = EikonJson, debug = TRUE
                                    , query = "R:MSFT.O", count = 2)
}
}
