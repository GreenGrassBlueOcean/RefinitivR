% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rd_GetData.R
\name{rd_GetData}
\alias{rd_GetData}
\title{Function to obtain data from Eikon. Based on the Eikon python function get_data}
\usage{
rd_GetData(
  RDObject,
  rics,
  Eikonformulas,
  Parameters = NULL,
  raw_output = FALSE,
  time_out = 60,
  verbose = FALSE,
  SpaceConvertor = ".",
  use_field_names_in_headers = F
)
}
\arguments{
\item{RDObject}{Refinitiv Data connection object}

\item{rics}{a vector containing the instrument RICS}

\item{Eikonformulas}{a vector containing character string of Eikon Formulas}

\item{Parameters}{a named key value list for setting parameters, Default: NULL}

\item{raw_output}{to return the raw list by chunk for debugging purposes, default = FALSE}

\item{time_out}{set the maximum timeout to the Eikon server, default = 60}

\item{verbose}{boolean, set to true to print out the actual python call with time stamp for debugging.}

\item{SpaceConvertor}{converts spaces in variables name into one of the following characters ".", "," , "-", "_", default is "."}

\item{use_field_names_in_headers}{}
}
\value{
a data.frame containing data.from Eikon
}
\description{
The function automatically chunks the list of rics into chunks that comply with the api limitations and in the end rebuilds the chunks again into a single data.frame.
}
\details{
Currently there is a known bug in the reticulate package with large integers.
If a request is made that returns large integers the reticulate package will return -1 for these integers.
See also this issue \url{https://github.com/rstudio/reticulate/issues/323}
or try for yourself as indicated here \url{https://community.rstudio.com/t/large-integer-conversion-from-python-to-r/82568}
}
\examples{
\dontrun{
Refinitiv <- Refinitiv::RDConnect()
ex1 <- rd_GetData(RDObject = Refinitiv, rics = c("MMM", "III.L"),
             Eikonformulas = c("TR.PE(Sdate=0D)/*P/E (LTM) - Diluted Excl*/"
             , "TR.CompanyName"), verbose = TRUE)

ex2 <- rd_GetData( RDObject = Refinitiv, rics = "AAPL.O"
                   , Eikonformulas = "TR.CompanyMarketCap(Sdate=0D)/*Market Cap*/"
                   )

# ex2 will return -1 which is most likely not the current market cap of apple")
# a workaround is to scale back the output to millions

ex2a <- rd_GetData( RDObject = Refinitiv, rics = "AAPL.O"
                   , Eikonformulas = "TR.CompanyMarketCap(Sdate=0D)/*Market Cap*/"
                   , Parameters = list("scale" = 6)
                   )
# or for more complex formula's
# scale back in the formula itself
ex2b <- rd_GetData( RDObject = Refinitiv, rics = "AAPL.O"
                   , Eikonformulas = "TR.CompanyMarketCap(Sdate=0D, scale=6)/*Market Cap*/"
                   )
}


\dontrun{
EikonJson <- RefinitivJsonConnect()
ex1 <- rd_GetData(RDObject = EikonJson, rics = c("MMM", "III.L"),
             Eikonformulas = c("TR.PE(Sdate=0D)/*P/E (LTM) - Diluted Excl*/"
             , "TR.CompanyName"), verbose = TRUE)

}
}
\references{
\url{https://developers.refinitiv.com/eikon-apis/eikon-data-api/docs?content=49692&type=documentation_item}
}
