% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/BearerTokenManagement.R
\name{rd_handshake}
\alias{rd_handshake}
\title{Get Bearer Key from Terminal}
\usage{
rd_handshake(debug = FALSE, force = TRUE)
}
\arguments{
\item{debug}{Logical. If `TRUE`, prints URLs and additional debugging information for JSON requests. Defaults to `FALSE`.}

\item{force}{Logical. If `TRUE`, forces fetching a new token even if an existing valid token is present. Defaults to `TRUE`.}
}
\value{
A list with the following fields:
\describe{
 \item{access_token}{Bearer token (key).}
 \item{expires_in}{Number of seconds until the token expires.}
 \item{token_type}{Type of token (e.g., "bearer").}
}
}
\description{
The `rd_handshake` function manages bearer tokens by verifying the existing token's validity
using `rd_VerifyToken`. If the token is invalid or expired, or if `force = TRUE`, it performs a handshake
to request a new token from the Refinitiv API. The function stores the new token and its expiration time
for future use.
}
\details{
The function first checks if an existing bearer token is present and valid. If so, and if `force = FALSE`,
it reuses the existing token. Otherwise, it initiates a handshake with the Refinitiv API to obtain a new token.
The new token and its expiration time are stored in global options for subsequent use.
}
\examples{
\dontrun{
# Fetch a new token regardless of existing tokens
response <- rd_handshake(force = TRUE, debug = TRUE)
print(response)
}

}
